<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Faster-than-Light memes</title>
  <link href="https://benjamin-asdf.github.io/faster-than-light-memes/atom.xml" rel="self"/>
  <link href="https://benjamin-asdf.github.io/faster-than-light-memes/"/>
  <updated>2022-12-23T09:12:43+00:00</updated>
  <id>https://benjamin-asdf.github.io/faster-than-light-memes/</id>
  <author>
    <name>Benjamin Schwerdtner</name>
  </author>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/anonymous-commands-in-emacs.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/anonymous-commands-in-emacs.html"/>
    <title>anonymous-commands-in-emacs</title>
    <updated>2022-09-23T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>anonymous-commands-in-emacs</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">anonymous-commands-in-emacs</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1fd4a75">Introduction</a>
<ul>
<li><a href="#org203e593">add-hook</a></li>
</ul>
</li>
<li><a href="#orgbf79866">Solution</a>
<ul>
<li><a href="#orgaaf1bff">defun</a></li>
</ul>
</li>
<li><a href="#org9ab0a52">Result</a></li>
</ul>
</div>
</div>

<div id="outline-container-org1fd4a75" class="outline-2">
<h2 id="org1fd4a75">Introduction</h2>
<div class="outline-text-2" id="text-org1fd4a75">
<p>
Generally, you do not want to make keybindings to anonymous lambdas.
Here is the primary reason that comes to mind:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(describe-keymap
 (<span style="font-weight: bold;">let</span> ((m (make-sparse-keymap)))
   (define-key m (kbd <span style="font-style: italic;">"f"</span>) (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">interactive</span>) 'hi))
   m))
</pre>
</div>

<p>
I get help buffer with this content:
</p>

<pre class="example" id="org48946ac">
Key             Binding
f		[closure]
</pre>

<p>
It is not really useful to just get the info [closure] here.
</p>
</div>

<div id="outline-container-org203e593" class="outline-3">
<h3 id="org203e593">add-hook</h3>
<div class="outline-text-3" id="text-org203e593">
<p>
The same thing goes for <code>add-hook</code>. From the doc string:
</p>

<blockquote>
<p>
FUNCTION may be any valid function, but it's recommended to use a
function symbol and not a lambda form.  Using a symbol will
ensure that the function is not re-added if the function is
edited, and using lambda forms may also have a negative
performance impact when running `add-hook' and `remove-hook'
</p>
</blockquote>

<p>
Some of the hooks functionality is meant for symbols.
</p>
</div>
</div>
</div>


<div id="outline-container-orgbf79866" class="outline-2">
<h2 id="orgbf79866">Solution</h2>
<div class="outline-text-2" id="text-orgbf79866">
<p>
Alias your function:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defalias</span> '<span style="font-weight: bold;">foo-a</span> (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">interactive</span>) 'hi))
 (describe-keymap
  (<span style="font-weight: bold;">let</span> ((m (make-sparse-keymap)))
    (define-key m (kbd <span style="font-style: italic;">"f"</span>) 'foo-a)
    (define-key m (kbd <span style="font-style: italic;">"b"</span>) (<span style="font-weight: bold;">defalias</span> '<span style="font-weight: bold;">foo-b</span> (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">interactive</span>) 'hi2)))
   m))
</pre>
</div>

<pre class="example" id="org46c25a7">
Key             Binding
b		foo-b
f		foo-a
</pre>


<p>
Foo-b works because <code>defalias</code> returns the symbol.
</p>
</div>

<div id="outline-container-orgaaf1bff" class="outline-3">
<h3 id="orgaaf1bff">defun</h3>
<div class="outline-text-3" id="text-orgaaf1bff">
<p>
<code>(defalias 'foo (lambda () (interactive)))</code>
</p>

<p>
is essentially the same as
</p>

<p>
<code>(defun foo () (interactive))</code>
</p>
</div>
</div>
</div>

<div id="outline-container-org9ab0a52" class="outline-2">
<h2 id="org9ab0a52">Result</h2>
<div class="outline-text-2" id="text-org9ab0a52">
<p>
I end up just using  <code>defun</code> inline.
Examples:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(add-hook
 'sh-mode-hook
 (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/add-bash-completion</span> () ...))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-elisp">(mememacs/leader-def
  <span style="font-style: italic;">"pP"</span> (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/project-switch-project-find-file</span> ()
         (<span style="font-weight: bold;">interactive</span>) ...))
</pre>
</div>

<p>
After writing this post, <a href="https://github.com/benjamin-asdf/dotfiles/commit/1e4135b977a5866de19020ba6f8a92b417339157">I went and fixed the remaining add-hook lambas</a> In my config.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-23 Fri 18:59</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/scittle-prints-itself.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/scittle-prints-itself.html"/>
    <title>scittle-prints-itself</title>
    <updated>2022-09-26T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>scittle-prints-itself</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">scittle-prints-itself</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf66bf29">Introduction</a></li>
<li><a href="#org81c6275">Problem statement</a></li>
<li><a href="#org6b00281">Some reagent code</a></li>
<li><a href="#org05c90c5">Fetch</a></li>
<li><a href="#org5747355">Pretty print the code..?</a></li>
<li><a href="#org2c09b6e">Eval string</a></li>
<li><a href="#orgeb60fd0">Only fetch once</a></li>
<li><a href="#orgf97e831">Make a big aquamarine rectangle into a small magenta rectangle</a></li>
<li><a href="#org7e1af45">Codepen</a></li>
</ul>
</div>
</div>
<p>
Description of the crafting of a website.
Up <a href="https://benjamin-asdf.github.io/scittle-prints-itself/">here</a>.
</p>

<div id="outline-container-orgf66bf29" class="outline-2">
<h2 id="orgf66bf29">Introduction</h2>
<div class="outline-text-2" id="text-orgf66bf29">
<p>
I was wondering about what is cool for a newcomer to coding.
I love lisp and I think one of the real joys in programming is interactive programming.
So if I find some way of communicating this magic, that would be great.
</p>

<p>
After my <a href="binaural-beats-using-scittle.html">binaural beats</a> adventure I feel like Scittle is an amazing tool
so I want to try it on something bigger.
So I had this idea of a Scittle website that prints its source code,
then you update the code and get an immediate effect.
</p>

<p>
I wanted this to be <b>my</b> website so maybe a new team member can also
go into the code and hack around.
</p>
</div>
</div>

<div id="outline-container-org81c6275" class="outline-2">
<h2 id="org81c6275">Problem statement</h2>
<div class="outline-text-2" id="text-org81c6275">
<ol class="org-ol">
<li>print your source code</li>
<li>ability to update code</li>
<li>no code editor in the browser (input field&#x2026;)
I am thinking getting this approximately non-clunky would be hard.
Especially balancing the parens.
I decided to go with a drag and drop area where you slurp in a
file into the browser.</li>
<li>This is not a <a href="https://en.wikipedia.org/wiki/Quine_(computing)">Quine</a> because it receives the source code as input</li>
</ol>
</div>
</div>

<div id="outline-container-org6b00281" class="outline-2">
<h2 id="org6b00281">Some reagent code</h2>
<div class="outline-text-2" id="text-org6b00281">
<p>
I do some StackOverflow-driven development for a drag-and-drop area.
</p>

<p>
I needed to figure out how <a href="https://www.w3schools.com/jsref/event_ondragover.asp">ondragover Event</a> and friends translate with
hiccup.
Luckily the legendary question answerer  <code>@p-himik</code> helped me out in the
<code>#clojurescript</code> slack channel.
Turns out that when I add <code>:on-drag-over</code> in the attribute map it works.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(ns main
  (:require
   [reagent.core :as r]
   [reagent.dom :as rdom]))

(defonce state (r/atom {:code-text ""}))

(defn drop-area []
  [:div#drop-area
   {:style {:margin-top "1rem"
	    :height "10rem"
	    :width "10rem"
	    :background "Aquamarine"}
    :on-drag-enter
    (fn [event]
      (set! (.. (js/document.getElementById "drop-area") -style -background) "cyan"))
    :on-drag-exit
    (fn [event]
      (set! (.. (js/document.getElementById "drop-area") -style -background) "Aquamarine"))
    :on-drag-over
    (fn [event]
      (doto
	  event
	  .stopPropagation
	 .preventDefault)
      (set! (.. event -dataTransfer -dropEffect) "copy"))
    :on-drop (fn [event]
      (doto
	  event
	  .stopPropagation
	  .preventDefault)
      (let [file (-&gt;  (.. event -dataTransfer -files) first)]
	(-&gt;
	 (.text file)
	 (.then
	  (fn [t] (swap! state assoc :code-text t)))))
      (set! (.. (js/document.getElementById "drop-area") -style -background) "Aquamarine"))}
   [:div
    {:style {:margin "1rem"
	     :padding-top "2.5rem"}}
    "drop a file here"]])

(defn code-snippet []
  [:div
   {:style {:background "gainsboro"}}
   (:code-text @state)])

(defn my-component []
  [:div
   [drop-area]
   [code-snippet]])

(rdom/render [my-component] (.getElementById js/document "app"))

(comment
  (swap! state assoc :code-text "foi110"))
</pre>
</div>

<p>
With this, I have a drop area for a file.
</p>

<p>
Wonderful thing:
Updating <code>state</code> redraws the UI for us.
</p>

<p>
Evaluating <code>(swap! state assoc :code-text "foi110")</code> makes <code>reagent</code> 's magic take effect.
</p>
</div>
</div>

<div id="outline-container-org05c90c5" class="outline-2">
<h2 id="org05c90c5">Fetch</h2>
<div class="outline-text-2" id="text-org05c90c5">
<p>
I also want to show the default code on the first load.
After some StackOverflow research, I determine <a href="https://www.w3schools.com/jsref/api_fetch.asp">fetch</a> should work.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(-&gt;
 (js/fetch "main.cljs")
 (.then (fn [x] (.text x)))
 (.then (fn [x] (swap! state assoc :code-text x))))
</pre>
</div>
</div>
</div>

<div id="outline-container-org5747355" class="outline-2">
<h2 id="org5747355">Pretty print the code..?</h2>
<div class="outline-text-2" id="text-org5747355">
<p>
At this point my website looks like this:
</p>


<div id="org0769aa3" class="figure">
<p><img src="https://i.imgur.com/VU5LqMM.png" alt="VU5LqMM.png" />
</p>
<p><span class="figure-number">Figure 1: </span>Halfway there. Sort of printing the source code now.</p>
</div>

<p>
I want to do something where at least the white space is rendered.
</p>

<p>
After searching the web, I decide I need a <code>&lt;pre&gt;</code> tag to say it is preformatted.
Also <code>&lt;code&gt;</code> sounds great.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(defn code-snippet []
  [:div
   {:style {:background "gainsboro"}}
   [:pre
    [:code
     (:code-text @state)]]])
</pre>
</div>

<p>
Update the function, re-eval the <code>rdom/render</code> form. Boom I instantly look at my updated visuals.
With cider, I can also call <code>cider-eval-buffer</code>, or <code>cider-eval-file</code>.
I first had the background <code>style</code> inside the <code>code</code> tag, which did not have
the look I wanted.
I can hack on a piece of UI in isolation. Directly. Without any mental
suspension time. It is great.
It is how all coding should be.
</p>
</div>
</div>

<div id="outline-container-org2c09b6e" class="outline-2">
<h2 id="org2c09b6e">Eval string</h2>
<div class="outline-text-2" id="text-org2c09b6e">
<p>
Now for the magic of updating the website with whatever you upload.
First, I ask Borkdude on slack how to evaluate a string.
-&gt; You use <code>load-string</code>.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(load-string
 (prn-str '(js/console.log "hello")))
</pre>
</div>

<p>
Says <code>hello</code> in the console.
</p>

<p>
I update my file drop handler with the side effect of loading the text:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(fn [t]
 (load-string l)
 (swap! state assoc :code-text t))
</pre>
</div>
<p>
(Yes there is a syntax error in this snippet).
</p>

<p>
I add this to the bottom of the file to see if my code is evaluated:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(js/console.log "hello2")
</pre>
</div>

<p>
Now loading silently fails when I upload my file, but the text updates.
</p>

<p>
So I evaluate this in isolation:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(load-string (@state :code-text))
</pre>
</div>

<p>
Ah, I get an analyzer error about <code>l</code> not being defined or something.
</p>

<p>
I update my handler like this:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(try
 (load-string t)
 (swap! state assoc :code-text t)
 (catch js/Error _ (js/alert "That code does not work.")))
</pre>
</div>

<p>
following Stew Halloway's example of binary error feedback. Either
there is an error, or there is no error.
Error messages are just bloat anyway.
</p>

<p>
console says:
</p>

<blockquote>
<p>
hello2
</p>
</blockquote>

<p>
Another piece in place, another hit of dopamine, wonderful coding moments.
</p>
</div>
</div>

<div id="outline-container-orgeb60fd0" class="outline-2">
<h2 id="orgeb60fd0">Only fetch once</h2>
<div class="outline-text-2" id="text-orgeb60fd0">
<p>
I update the fetch code like so:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(or
 (:code-text @state)
 (-&gt;
  (js/fetch "main.cljs")
  (.then (fn [x] (.text x)))
  (.then (fn [x] (swap! state assoc :code-text x)))))
</pre>
</div>

<p>
I can do this because in Clojure everything is an expression and I can
put expressions anywhere.
</p>
</div>
</div>

<div id="outline-container-orgf97e831" class="outline-2">
<h2 id="orgf97e831">Make a big aquamarine rectangle into a small magenta rectangle</h2>
<div class="outline-text-2" id="text-orgf97e831">
<p>
I want something on the eyes so I change the style of the drop area:
</p>

<div class="org-src-container">
<pre class="src src-clojure">{:margin-top "1rem"
 :height "5rem"
 :width "5rem"
 :background "magenta"}
</pre>
</div>


<p>
Drag and drop, and:
</p>


<div id="org92020ea" class="figure">
<p><img src="https://i.imgur.com/IUrSY7t.png" alt="IUrSY7t.png" />
</p>
<p><span class="figure-number">Figure 2: </span>Visuals updated via dragging and dropping a source file.</p>
</div>

<p>
In emacs: <code>list-colors-display</code>, nice. And drag and drop with <a href="https://github.com/mwh/dragon">dragon.</a>
</p>

<p>
This contraption of course pales in comparison to having a REPL running.
But the idea is that it is might useful to somebody that doesn't even
know what a REPL <b><b>is</b></b>.
And if you are a beginner and now you wonder what that REPL thing is.
<a href="intro-to-clojure.html">Here</a> I try to make a list of how to get a dev setup.
</p>

<p>
Here is an idea I had and did not put into the initial version: Make
an <code>undo</code> button. So that the user can go back in the history of the website
</p>
</div>
</div>

<div id="outline-container-org7e1af45" class="outline-2">
<h2 id="org7e1af45">Codepen</h2>
<div class="outline-text-2" id="text-org7e1af45">
<p>
An arguably more mature version of this is up on <a href="https://codepen.io/Prestance/pen/PoOdZQw">codepen</a>.
</p>

<p>
A key difference is that my website prints its whole code.
No machinery is hidden anywhere.
</p>

<p>
If I may say so I think this is cute.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-26 Mon 13:21</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/intro-to-clojure.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/intro-to-clojure.html"/>
    <title>intro-to-clojure</title>
    <updated>2022-09-12T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>intro-to-clojure</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">intro-to-clojure</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6a9e187">Introduction</a></li>
<li><a href="#org15f4332">Start</a></li>
<li><a href="#org4270a84">A dev environment</a>
<ul>
<li><a href="#org07772e7">Vs Code</a></li>
<li><a href="#org832073e">Emacs</a></li>
</ul>
</li>
<li><a href="#orgf48f4d7">Nr 1 book for beginners</a></li>
<li><a href="#org6454521">Slack</a></li>
<li><a href="#orgd04e426">Other such lists</a></li>
</ul>
</div>
</div>

<div id="outline-container-org6a9e187" class="outline-2">
<h2 id="org6a9e187">Introduction</h2>
<div class="outline-text-2" id="text-org6a9e187">
<p>
Clojure is a modern, functional lisp with a fiercely convinced community and
production orientation.
</p>
</div>
</div>

<div id="outline-container-org15f4332" class="outline-2">
<h2 id="org15f4332">Start</h2>
<div class="outline-text-2" id="text-org15f4332">
<p>
I highly recommend <a href="https://www.maria.cloud/intro">Maria.Cloud</a>, you can just go there and start coding.
This is great for anybody that does not know yet x
</p>
</div>
</div>

<div id="outline-container-org4270a84" class="outline-2">
<h2 id="org4270a84">A dev environment</h2>
<div class="outline-text-2" id="text-org4270a84">
<p>
Get prepared for your journey as a pilot of an alien spaceship.
As a beginner I suggest either
</p>
</div>

<div id="outline-container-org07772e7" class="outline-3">
<h3 id="org07772e7">Vs Code</h3>
<div class="outline-text-3" id="text-org07772e7">
<p>
Easy to make work. A great editor. You will not need to be ashamed of
your choice. <a href="https://calva.io/getting-started/">calva for vscode</a>
</p>
</div>
</div>

<div id="outline-container-org832073e" class="outline-3">
<h3 id="org832073e">Emacs</h3>
<div class="outline-text-3" id="text-org832073e">
<p>
Strong affinity to hacker culture and a program that is more than a
tool, but eventually an extension to your hands, heart, and mind.
</p>

<p>
Here is a config file I tried to make for beginners:
<a href="https://github.com/benjamin-asdf/simple-easy-emacs">https://github.com/benjamin-asdf/simple-easy-emacs</a>
</p>

<p>
A framework by clojurians that might be just right for you:
<a href="https://github.com/corgi-emacs/corgi">https://github.com/corgi-emacs/corgi</a>
</p>

<p>
There is also doom and spacemacs that enjoy wide appraisal for their
"out of the box" experience.
</p>
</div>
</div>
</div>

<div id="outline-container-orgf48f4d7" class="outline-2">
<h2 id="orgf48f4d7">Nr 1 book for beginners</h2>
<div class="outline-text-2" id="text-orgf48f4d7">
<p>
<a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/">Clojure for the Brave and True</a>
</p>
</div>
</div>

<div id="outline-container-org6454521" class="outline-2">
<h2 id="org6454521">Slack</h2>
<div class="outline-text-2" id="text-org6454521">
<p>
Meet nice people that are excited about the tech <a href="https://clojurians.slack.com/?redir">on slack</a>.
Seriously a lot of people hang there and answer beginner questions,
everybody is welcome.
</p>
</div>
</div>

<div id="outline-container-orgd04e426" class="outline-2">
<h2 id="orgd04e426">Other such lists</h2>
<div class="outline-text-2" id="text-orgd04e426">
<p>
Carin is cool and has a funny picture of the emacs learning curve here:
<a href="https://howistart.org/posts/clojure/1/">https://howistart.org/posts/clojure/1/</a>
</p>

<p>
I like that they have a philosophy section mentioning Rich Hickey's talks
this matters a lot to clojurians.
</p>

<p>
<a href="https://thoughtbot.com/blog/tips-for-clojure-beginners">https://thoughtbot.com/blog/tips-for-clojure-beginners</a>
<a href="https://gist.github.com/yogthos/be323be0361c589570a6da4ccc85f58f">https://gist.github.com/yogthos/be323be0361c589570a6da4ccc85f58f</a>
<a href="https://www.clojurenewbieguide.com/">https://www.clojurenewbieguide.com/</a>
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-12 Mon 20:23</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/dir-env-process-environment.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/dir-env-process-environment.html"/>
    <title>dir-env-process-environment</title>
    <updated>2022-10-17T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>dir-env-process-environment</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">dir-env-process-environment</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgeab6d90">Introduction</a></li>
<li><a href="#orgab88336">The setup</a>
<ul>
<li><a href="#orgb7d057b">From the project I currently work on:</a></li>
</ul>
</li>
<li><a href="#org57473e8">Non-file-buffer</a></li>
<li><a href="#org45c715c">revert with grace</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgeab6d90" class="outline-2">
<h2 id="orgeab6d90">Introduction</h2>
<div class="outline-text-2" id="text-orgeab6d90">
<p>
Making <a href="bashing-is-better-than-extending.html">shell commands</a> is one of the great joys of emacs.
</p>

<p>
An advanced use case is that you want to set up a process environment for
everything you do inside some project.
</p>

<p>
What I show here works for <code>compile</code>, <code>shell-command</code>, and even cider connections.
</p>
</div>
</div>

<div id="outline-container-orgab88336" class="outline-2">
<h2 id="orgab88336">The setup</h2>
<div class="outline-text-2" id="text-orgab88336">
<p>
<code>.dir-locals.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-elisp">((nil
  .
  ((eval progn
         (make-local-variable 'process-environment)
         (<span style="font-weight: bold;">setq</span> process-environment
               (copy-sequence process-environment))
         (setenv <span style="font-style: italic;">"FOO"</span> <span style="font-style: italic;">"hurr"</span>)))))
</pre>
</div>

<p>
Yes, it is a bit convoluted but for a <a href="https://emacs.stackexchange.com/questions/35964/how-can-i-get-buffer-local-environment-variables-via-dir-locals">reason.</a>
We need to copy the list, else if somebody modifies the cdr locally,
that would modify the global value.
(In the case that <code>FOO</code> is an element in the list somewhere already).
</p>

<p>
The answer mentions <code>setq-local</code>. I tried that without success.
</p>

<p>
<code>Shell-command</code> and friends will inherit the process environmen. It pretty much just works.
</p>
</div>

<div id="outline-container-orgb7d057b" class="outline-3">
<h3 id="orgb7d057b">From the project I currently work on:</h3>
<div class="outline-text-3" id="text-orgb7d057b">
<div class="org-src-container">
<pre class="src src-elisp">((nil
  .
  ((eval progn
         (make-local-variable 'process-environment)
         (<span style="font-weight: bold;">setq</span> process-environment
               (copy-sequence process-environment))
         (setenv <span style="font-style: italic;">"AWS_PROFILE"</span> <span style="font-style: italic;">"datalake-deployer"</span>)
         (<span style="font-weight: bold;">setq-local</span> cider-clojure-cli-aliases (concat cider-clojure-cli-aliases <span style="font-style: italic;">":dev"</span>))))))
</pre>
</div>

<p>
Now I start cider connections with <code>AWS_PROFILE</code> set correctly.
Also I have a <a href="https://github.com/babashka/babashka">babashka</a> task for deploying that needs this env and it all just works.
</p>
</div>
</div>
</div>

<div id="outline-container-org57473e8" class="outline-2">
<h2 id="org57473e8">Non-file-buffer</h2>
<div class="outline-text-2" id="text-org57473e8">
<p>
By default, <code>.dir-locals.el</code> does not apply to buffers without file names.
(When the local variable <code>buffer-file-name</code> is not set).
</p>

<p>
There is a function <code>hack-dir-local-variables-non-file-buffer</code> for this purpose.
This is called by <code>dired</code>, also <code>magit</code>.
</p>

<p>
I usually start processes from either a (source) file buffer or dired.
</p>
</div>
</div>

<div id="outline-container-org45c715c" class="outline-2">
<h2 id="org45c715c">revert with grace</h2>
<div class="outline-text-2" id="text-org45c715c">
<p>
When you make a change to your <code>.dir-locals</code>, call <code>revert-buffer</code> in
whatever buffer you want to have the effect.
It hacks the local variables again for the buffer.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-10-17 Mon 09:56</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/not-even-the-sky-is-the-limit.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/not-even-the-sky-is-the-limit.html"/>
    <title>not-even-the-sky-is-the-limit</title>
    <updated>2022-11-15T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>not-even-the-sky-is-the-limit</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">not-even-the-sky-is-the-limit</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6b9a24f">Introduction</a></li>
<li><a href="#orgdb74aee">One way to learn is to learn on a playground</a></li>
<li><a href="#org2fb5082">Huberman</a></li>
<li><a href="#orgb9f1a49">The practice</a></li>
</ul>
</div>
</div>
<p>
Cold showers are a hello world for being determined.
</p>

<div id="outline-container-org6b9a24f" class="outline-2">
<h2 id="org6b9a24f">Introduction</h2>
<div class="outline-text-2" id="text-org6b9a24f">
<p>
I have been practicing <a href="https://en.wikipedia.org/wiki/Wim_Hof">Wim Hof</a> Method for years.
It is a spiritual path of sorts.
</p>

<p>
There is this thing where you embrace being an animal, and animals
are really hardcore man.
Human animals plan, think and discover how to world works.
The brain is the control hub of our inner physiology also.
Getting in touch with your physiology is not mystical, and not reserved
for a certain kind of person either.
It is using the paths in your brain that evolved to do just
that. <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
</p>

<p>
To close the loop: The inner physiology is another part of the
world. With its mechanics, story and places that can be discovered - and mastered to various degrees.
Such is the human way,
you are the animal
</p>
<ul class="org-ul">
<li>uses thought</li>
<li>likes stories</li>
<li>makes sense of objects etc in the world</li>
</ul>

<p>
Where can you start? With the things you already have control
over. Hence breathing techniques, stretching and cold exposure.
Emphasize the in-breath over the out-breath and you are pumping adrenaline.
The other way around and you get more relaxed.
Cold exposure pumps dopamine, with a long arc. <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>  It makes the whole day awesome.
A cold shower is already an achievement that sets you up for performance.
Wim has mentioned somewhere on the free part of his app something
about self-determination and having "the cold as a teacher". An upsight
clicked clicked in me that will try to share here.
</p>
</div>
</div>

<div id="outline-container-orgdb74aee" class="outline-2">
<h2 id="orgdb74aee">One way to learn is to learn on a playground</h2>
<div class="outline-text-2" id="text-orgdb74aee">
<p>
There is a reason we make hello world programs. We learn in the small
what is similar for the large.
</p>

<p>
Say Wim Hof is right and self-determination is a mental thing I can grab
How do I learn to do so?
Also importantly, how do you even know you are doing it?
Enter cold showers ("The cold is our teacher").
It is hard to kill yourself with a cold shower, yet it takes mental
energy to go into one and to stay. It gives you a chance to be
determined in a small, controlled, safe environment.
You manage to endure a wall of physical discomfort, you are doing
it. This is what determination is.
</p>

<p>
<i>just do it</i>
</p>

<p>
In the lore of Wim-hoffing, you keep a calm mind and observe yourself
being able to <i>do it</i>.
</p>

<p>
You are deploying the mental capacities that you might call <code>determination</code>.
</p>

<p>
The cold shower is the playground that allows you to see how it is to
be determined.
You observe the mentality, the mechanics, the feel, the drive, the
<i>just doing</i> it. What you <i>are</i> when you are being determined.
This then, shows you how to be determined elsewhere.
The cold is not an end goal, it is a simple, easy playground where we
can test how it is to be determined.
This also means we have a benchmark for whether we are deploying
determination, or not.
</p>

<p>
To learn something you need some way of telling whether you are
doing it right.
</p>

<p>
I connect this to an experience I had while I was learning to juggle.
There was a moment when I was doing 1 or 2 balls when I realized:
here is a limit, a place where I can invest in training and I will get
better and build a foundation and eventually be able to juggle. (I was right).
</p>

<blockquote>
<p>
The only place where you can grow is at the edge.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-org2fb5082" class="outline-2">
<h2 id="org2fb5082">Huberman</h2>
<div class="outline-text-2" id="text-org2fb5082">
<p>
<a href="https://hubermanlab.com/">Professor Huberman</a> is since recently one of the great science
communicators of our time.
About physiology, neuroscience and (my words) frankly, the human soul.
</p>

<p>
Transcript from a recent Q&amp;A event (you can find it on the Huberman lab
podcast feed):
</p>

<blockquote>
<p>
If you want to get the most out of the cold exposure then you want to get
to that point of "I want to get out of here, but I know I can
stay in safely, but I really want to get out of here".
</p>

<p>
It's a little hard to explain, but there is just
so much learning in those short moments about where your mind goes.
And this sounds subjective and maybe a little whishy-washy.
You can realize great things about yourself in those moments.
You can find insight in those moments.
</p>
</blockquote>

<p>
I agree. I call this learning how to be determined.
</p>
</div>
</div>

<div id="outline-container-orgb9f1a49" class="outline-2">
<h2 id="orgb9f1a49">The practice</h2>
<div class="outline-text-2" id="text-orgb9f1a49">
<p>
I can recommend the Wim hof app to get started. There is a diary thing
where you start with 10-second cold showers after a warm shower etc.
</p>

<p>
Tip: if you have a dispatchable shower head, put it in your hand and
move it around. Cold exposure is all about control. If you have the
shower head in your hand, you gain control.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
One way to describe this is by having a set of inside jokes
with the physiology driving parts of your brain. Using your own style.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://hubermanlab.com/using-deliberate-cold-exposure-for-health-and-performance/">Andrew Huberman</a> has in recent times communicated beautifully about the
the current science of cold exposure, breathing technique and
stretching.
</p></div></div>


</div>
</div></div>
<div id="postamble" class="status">
<p class="date">Date: 2022-11-15 Tue 19:20</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/pearls-of-introspection.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/pearls-of-introspection.html"/>
    <title>pearls-of-introspection</title>
    <updated>2022-11-12T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>pearls-of-introspection</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">pearls-of-introspection</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org11eb66b">The describes</a>
<ul>
<li><a href="#org0953bb0">describe-mode</a></li>
<li><a href="#orgf2003f8">describe-char</a></li>
<li><a href="#org0f65707">describe-key</a></li>
<li><a href="#org454dbc1">describe-function</a></li>
<li><a href="#org812cd9d">describe-keymap</a></li>
<li><a href="#org66a4ae3">prefix-help-command</a>
<ul>
<li><a href="#org55cab68">embark-bindings</a></li>
</ul>
</li>
<li><a href="#org0c6d3bb">M-x <code>describe-</code></a></li>
</ul>
</li>
<li><a href="#org6501509">view-lossage</a></li>
<li><a href="#org9eadb67">apropos-value</a></li>
<li><a href="#org8cf6cf2">find-library</a></li>
<li><a href="#orgc4ab705">where-is</a></li>
</ul>
</div>
</div>
<p>
Recently, I watched <a href="https://www.youtube.com/watch?v=6M1JesjbtDM">BugsWriter falling in love with elisp</a> <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> - he said
about <code>describe-mode</code>
</p>

<blockquote>
<p>
Why did nobody ever tell me about this?
</p>
</blockquote>

<p>
This post is called Pearls of introspection.
</p>

<blockquote>
<p>
All of Emacs is one bright pearl.
</p>
</blockquote>

<div id="outline-container-org11eb66b" class="outline-2">
<h2 id="org11eb66b">The describes</h2>
<div class="outline-text-2" id="text-org11eb66b">
</div>
<div id="outline-container-org0953bb0" class="outline-3">
<h3 id="org0953bb0">describe-mode</h3>
<div class="outline-text-3" id="text-org0953bb0">
<p>
Lists all current keybinds in a buffer. Huge output, sometimes what
you want.
</p>
</div>
</div>

<div id="outline-container-orgf2003f8" class="outline-3">
<h3 id="orgf2003f8">describe-char</h3>
<div class="outline-text-3" id="text-orgf2003f8">
<p>
Emacs is a text editor, text is made up of chars.
<code>describe-char</code>  is useful if you want to know what face is rendering.
It goes beyond that by showing string properties, overlays,
and buttons. This can be useful for debugging.
</p>

<p>
Story:
Once I deleted some packages on my system, then I go into emacs <code>info</code>
and some of the text is not rendered right.
</p>

<p>
<code>describe-char</code> gave me the hint, the <code>fixed-pitch</code> face wanted
"Monospace Serif" or some such but I only had Monospace.
</p>

<p>
So I did this and was happy ever after:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(set-face-attribute 'fixed-pitch nil  <span style="font-weight: bold;">:family</span> <span style="font-style: italic;">"Monospace"</span>)
(set-face-attribute 'fixed-pitch-serif nil  <span style="font-weight: bold;">:family</span> <span style="font-style: italic;">"Monospace"</span>)
</pre>
</div>

<p>
Worth binding:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(define-key help-map (kbd <span style="font-style: italic;">"c"</span>) #'describe-char)
</pre>
</div>
</div>
</div>


<div id="outline-container-org0f65707" class="outline-3">
<h3 id="org0f65707">describe-key</h3>
<div class="outline-text-3" id="text-org0f65707">
<p>
"What does this key do?" - the answer is <code>describe-key</code> and hit the
key.
</p>
</div>
</div>

<div id="outline-container-org454dbc1" class="outline-3">
<h3 id="org454dbc1">describe-function</h3>
<div class="outline-text-3" id="text-org454dbc1">
<p>
Emacs functions have amazing docstrings.
</p>

<p>
The help buffer has a keymap of its own, try <code>?</code> to list keybinds.
</p>

<p>
Highlight: <code>s</code> to go to source.
</p>
</div>
</div>

<div id="outline-container-org812cd9d" class="outline-3">
<h3 id="org812cd9d">describe-keymap</h3>
<div class="outline-text-3" id="text-org812cd9d">
<p>
Probably faster than describe-mode, renders a keymap in a help buffer.
Try <code>describe-keymap</code> -&gt; <code>help-map</code> hehe.
</p>
</div>
</div>

<div id="outline-container-org66a4ae3" class="outline-3">
<h3 id="org66a4ae3">prefix-help-command</h3>
<div class="outline-text-3" id="text-org66a4ae3">
<p>
You type <code>?</code> after starting to type a prefix, then you get the binds.
</p>
</div>

<div id="outline-container-org55cab68" class="outline-4">
<h4 id="org55cab68">embark-bindings</h4>
<div class="outline-text-4" id="text-org55cab68">
<p>
An alternative to the default <code>?</code>, it is amazing. I get a vertico
 completing-read of the binds.
</p>
</div>
</div>
</div>

<div id="outline-container-org0c6d3bb" class="outline-3">
<h3 id="org0c6d3bb">M-x <code>describe-</code></h3>
<div class="outline-text-3" id="text-org0c6d3bb">
<p>
There are more, some of them I never used. Emacs is vast like the ocean.
</p>
</div>
</div>
</div>

<div id="outline-container-org6501509" class="outline-2">
<h2 id="org6501509">view-lossage</h2>
<div class="outline-text-2" id="text-org6501509">
<p>
You accidentally hit some key, and something unexpected happens.
<code>view-lossage</code> is your friend. It shows the last keys + commands.
</p>

<p>
It is like the morning-after pill version of <code>describe-key</code>.
</p>

<p>
story:
I sometimes accidentally hit <code>y</code> before typing the text for
an <code>avy</code> command.
</p>

<p>
Every time I was like "Holy cow whatever I hit there is powerful". <sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>
</p>

<p>
I didn't know about <code>view-lossage</code>. The thing is, it would not have
helped, because <code>avy</code> is reading the key, then dispatching on the key.
I guess it needs to go through the keymap system or something to show
up in <code>view-lossage</code>.
</p>
</div>
</div>

<div id="outline-container-org9eadb67" class="outline-2">
<h2 id="org9eadb67">apropos-value</h2>
<div class="outline-text-2" id="text-org9eadb67">
<p>
This helps me about once per year.
</p>

<p>
It is extremely satisfying when you use this and it helps you.
I once figured out about <code>revert-buffer-function</code> by using it.
</p>

<p>
You can revert <code>shell-command</code> buffers to rerun the command but I did
not know by which principle.
</p>

<p>
<code>apropos-value</code>, then typing my shell command showed me there was a
buffer-local
variable called <code>revert-buffer-function</code>. It worked because
Elisp closure objects print with their environment. In other words, the
value of <code>revert-buffer-function</code> was a lambda that printed with my
shell command. It is quite wild.
</p>
</div>
</div>

<div id="outline-container-org8cf6cf2" class="outline-2">
<h2 id="org8cf6cf2">find-library</h2>
<div class="outline-text-2" id="text-org8cf6cf2">
<p>
Read code, and do little experiments. I am not sure but I think there
might be something profound about Elisp and emacs.
I think the language is the program and the program is the language or
something. Knowing the program is to know the language and knowing the
language is to know the program.
(Insert link to top Elisp functions blog post here).
</p>
</div>
</div>

<div id="outline-container-orgc4ab705" class="outline-2">
<h2 id="orgc4ab705">where-is</h2>
<div class="outline-text-2" id="text-orgc4ab705">
<p>
I just discovered this via <code>describe-keymap</code> into <code>help-map</code> lol.
This is like <code>describe-key</code> but you say the command and it says the
keybinding.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><blockquote>
<p>
I thought lisp was going to be complicated but it is simple.
</p>
</blockquote>
<p class="footpara">
That is an interesting tension between outside perception and the
actual language.
Since you write the AST directly, you can say what you mean.
The power of lisp is that the code is made of
</p>
<ol class="org-ol">
<li>Ideas</li>
<li>There is nothing else.</li>
</ol></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
It makes the cursor stay and yank the target word.
Hit <code>?</code> before typing the keys for avy.
The way it works is that avy can dispatch with different actions, the
default is to jump to the location, but <code>y</code> for example yanks a word
and makes your cursor stay where you are. It is really powerful.
Ace-window has the same paradigm.
</p></div></div>


</div>
</div></div>
<div id="postamble" class="status">
<p class="date">Date: 2022-11-12 Sat 16:02</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/aws-iam-and-cloudwatch-logs-start-query.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/aws-iam-and-cloudwatch-logs-start-query.html"/>
    <title>aws-iam-and-cloudwatch-logs-start-query</title>
    <updated>2022-11-30T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>aws-iam-and-cloudwatch-logs-start-query</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">aws-iam-and-cloudwatch-logs-start-query</h1>
<blockquote>
<p>
User with accountId: 123456791011 is not authorized to perform StartQuery
</p>
</blockquote>

<p>
Example iam policy for querying cloudwatch logs (that one works):
</p>

<div class="org-src-container">
<pre class="src src-js">  {
    <span style="font-style: italic;">"Version"</span>: <span style="font-style: italic;">"2012-10-17"</span>,
    <span style="font-style: italic;">"Statement"</span>: [
        {
            <span style="font-style: italic;">"Effect"</span>: <span style="font-style: italic;">"Allow"</span>,
            <span style="font-style: italic;">"Action"</span>: <span style="font-style: italic;">"logs:StartQuery"</span>,
            <span style="font-style: italic;">"Resource"</span>: <span style="font-style: italic;">"arn:aws:logs:us-east-1:123456791011:log-group:hairy-log-group-name:*"</span>
        },
        {
            <span style="font-style: italic;">"Effect"</span>: <span style="font-style: italic;">"Allow"</span>,
            <span style="font-style: italic;">"Action"</span>: [
                <span style="font-style: italic;">"logs:GetQueryResults"</span>,
                <span style="font-style: italic;">"logs:StopQuery"</span>
            ],
            <span style="font-style: italic;">"Resource"</span>: <span style="font-style: italic;">"*"</span>
        }
    ]
}
</pre>
</div>

<p>
The above error you get when you try the log-group arn without the
`:*` at the end.
</p>

<p>
You need the `:*` behind the log-group for some reason, probably
because the log-streams also participate in the resource permission
thing or something.
</p>

<p>
This was kind of hard to figure out, no examples on the official
websites and you think you do it right from reading the documentation.
</p>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-11-30 Wed 16:29</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/bashing-is-better-than-extending.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/bashing-is-better-than-extending.html"/>
    <title>Bashing is better than extending</title>
    <updated>2022-09-22T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Bashing is better than extending</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">Bashing is better than extending</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5decd33">Introduction</a></li>
<li><a href="#org3aaa01e">read-shell-command</a></li>
<li><a href="#orgbdd6ba7">bash-completion</a></li>
<li><a href="#org2a046a9">bash completions are now your lever</a>
<ul>
<li><a href="#org2474aa7">Babashka tasks</a></li>
</ul>
</li>
<li><a href="#orga1b95ba">Commands that leverage <code>read-shell-command</code></a>
<ul>
<li><a href="#org9521355">shell-command</a>
<ul>
<li><a href="#org5e6323c">Here is a nugget:</a></li>
<li><a href="#org5eb2e68">Good to know:</a></li>
<li><a href="#org9ba7c79">Output buffer</a></li>
</ul>
</li>
<li><a href="#org2439764">shell-command-async</a></li>
<li><a href="#orgabf38de">compile</a></li>
<li><a href="#orgb8f490f">dired</a></li>
<li><a href="#org221353c">shell-command-on-file</a></li>
</ul>
</li>
<li><a href="#orgb450801">It gets even better</a>
<ul>
<li><a href="#org9d2f380">revert-buffer in compilation buffers</a></li>
</ul>
</li>
<li><a href="#org2e6017d">Scripts at the speed of thought</a>
<ul>
<li><a href="#orgb3c41dd">mememacs/create-script</a>
<ul>
<li><a href="#org0f95c3a">bash-completion in <code>sh-mode</code></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org8450535">Oh async-shell-command, my trusted friend</a>
<ul>
<li><a href="#org2e5f269">Put the command into the buffer name</a></li>
<li><a href="#org67c1585">shell-command&#x2013;same-buffer-confirm</a></li>
<li><a href="#org8da2099">shell-mode as a terminal emulator</a></li>
</ul>
</li>
<li><a href="#org071479d">The next layer on the cake</a>
<ul>
<li><a href="#org5d76de6">project</a></li>
<li><a href="#org4fe515f">recompile</a></li>
<li><a href="#org868a82d">ansi colors for comint</a></li>
</ul>
</li>
<li><a href="#org9ca55b4">Levers are great</a>
<ul>
<li><a href="#org10b4a06">ssh</a></li>
<li><a href="#org3c1b70b">embarking</a></li>
<li><a href="#orgc75ec35">pass</a></li>
</ul>
</li>
<li><a href="#org34a6b15">Particulars</a>
<ul>
<li><a href="#org37f5ef0">shell-file-name</a></li>
<li><a href="#orge1a5ff1">troubleshoot</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
<b>Not</b> how to run babashka tasks.
</p>

<p>
How <code>bash-completion</code>  makes everything better.
</p>

<p>
How to run <b>any</b> shell commands.
</p>

<p>
Technology around <code>shell-command</code>.
</p>

<p>
Simplicity and joy.
</p>

<div id="outline-container-org5decd33" class="outline-2">
<h2 id="org5decd33">Introduction</h2>
<div class="outline-text-2" id="text-org5decd33">
<p>
Ok, let's just do it. You might want to hold tight to your chair because
the juiciness and elegance of what follow might just blow you over.
Here is how I build my <a href="https://benjamin-asdf.github.io/faster-than-light-memes/">blog</a> with babashka tasks:
</p>


<div id="org93f5ca2" class="figure">
<p><img src="https://github.com/benjamin-asdf/faster-than-light-memes/blob/master/assets/bb-task-demo.gif?raw=true" alt="bb-task-demo.gif?raw=true" />
</p>
<p><span class="figure-number">Figure 1: </span>Using <code>compile</code> to leverage <code>read-shell-command</code> and thereby <code>bash-completions</code>. Recompiling via <code>revert-buffer</code>. Dismissing the <code>*compilation*</code> buffer.</p>
</div>

<p>
You might think "Ok sure, looks useful." Let me entice you with the
the really impressive thing about this:
</p>

<p>
There is nothing concrete about babashka tasks nor about that specific
project in my emacs config.
It just works by having a <code>bb.edn</code> with tasks.
</p>

<p>
Made possible via the harmony between some 3 or 4 general tools.
Like layers of ice. You deserve some skates to ride on
it. Smoothly, gracefully and <b>fast</b>.
Here is the story of a happy little package called <code>bash-completion</code>.
</p>
</div>
</div>

<div id="outline-container-org3aaa01e" class="outline-2">
<h2 id="org3aaa01e">read-shell-command</h2>
<div class="outline-text-2" id="text-org3aaa01e">
<p>
This is like <code>read-from-minibuffer</code> but sets some keymap and history.
Hit <code>&lt;tab&gt;</code>, you get completions from <code>shell-dynamic-complete-functions</code>.
Those completions are sort of okay, but they do not give you command-specific completions.
Invoke <code>shell-command</code>, then type <code>git checkout</code>, hit tab. Nothing happens. <b><b>Yet</b></b>.
</p>
</div>
</div>

<div id="outline-container-orgbdd6ba7" class="outline-2">
<h2 id="orgbdd6ba7">bash-completion</h2>
<div class="outline-text-2" id="text-orgbdd6ba7">
<p>
Ok your emacs life is about to level up +1 <a href="https://github.com/szermatt/emacs-bash-completion">bash-completion</a>.
Config:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(use-package bash-completion
  <span style="font-weight: bold;">:init</span> (autoload
          'bash-completion-dynamic-complete
          <span style="font-style: italic;">"bash-completion"</span>
          <span style="font-style: italic;">"BASH completion hook"</span>)
  (add-hook
   'shell-dynamic-complete-functions
   #'bash-completion-dynamic-complete))
</pre>
</div>

<p>
Here are the completions of your shell at the tips of those sweet
coconut oily fingers.
</p>

<p>
Now you can do <code>shell-command</code>
-&gt; Hit that tab while typing <code>git checkout ..</code> a door just
opened.
</p>
</div>
</div>

<div id="outline-container-org2a046a9" class="outline-2">
<h2 id="org2a046a9">bash completions are now your lever</h2>
<div class="outline-text-2" id="text-org2a046a9">
<p>
We have entered the realm of harnessing already existing shell completions directly.
</p>
</div>

<div id="outline-container-org2474aa7" class="outline-3">
<h3 id="org2474aa7">Babashka tasks</h3>
<div class="outline-text-3" id="text-org2474aa7">
<p>
Babashka tasks are one of the great discoveries of our time,
allowing us to write build tasks in Clojure, with the
development ergonomics of a lisp.
</p>

<p>
The babashka book has <a href="https://book.babashka.org/#_terminal_tab_completion">a section</a> on adding shell completions.
Boom. This is all you need.
Now you can enjoy those babashka tasks completions.
</p>
</div>
</div>
</div>

<div id="outline-container-orga1b95ba" class="outline-2">
<h2 id="orga1b95ba">Commands that leverage <code>read-shell-command</code></h2>
<div class="outline-text-2" id="text-orga1b95ba">
<p>
They use <code>read-shell-command</code>.
Making <code>read-shell-command</code> <b>good</b> will pay off for all these.
</p>
</div>

<div id="outline-container-org9521355" class="outline-3">
<h3 id="org9521355">shell-command</h3>
<div class="outline-text-3" id="text-org9521355">
<p>
Bound to <code>M-!</code>
</p>

<p>
This is the <code>interactive</code> doorway into emacs lisp <code>start-process</code> functionality.
</p>
</div>

<div id="outline-container-org5e6323c" class="outline-4">
<h4 id="org5e6323c">Here is a nugget:</h4>
<div class="outline-text-4" id="text-org5e6323c">
<blockquote>
<p>
With prefix argument, insert the COMMAND's output at point.
</p>
</blockquote>

<p>
<code>C-u M-!</code> <code>date</code> and you have a date inserted in the buffer.
</p>

<p>
Like this:
<code>Thu Sep 29 10:55:44 AM CEST 2022</code>
</p>
</div>
</div>

<div id="outline-container-org5eb2e68" class="outline-4">
<h4 id="org5eb2e68">Good to know:</h4>
<div class="outline-text-4" id="text-org5eb2e68">
<blockquote>
<p>
If COMMAND ends in &amp;, execute it asynchronously.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-org9ba7c79" class="outline-4">
<h4 id="org9ba7c79">Output buffer</h4>
<div class="outline-text-4" id="text-org9ba7c79">
<p>
Your command output is located by default in a buffer named by <code>shell-command-buffer-name</code>.
Or <code>shell-command-buffer-name-async</code> when async.
</p>
</div>
</div>
</div>

<div id="outline-container-org2439764" class="outline-3">
<h3 id="org2439764">shell-command-async</h3>
<div class="outline-text-3" id="text-org2439764">
<p>
Bound to <code>M-&amp;</code> and has the same effect as adding a <code>&amp;</code> in <code>shell-command</code>.
To kill the process I can hit <code>C-c C-c</code>.
</p>
</div>
</div>

<div id="outline-container-orgabf38de" class="outline-3">
<h3 id="orgabf38de">compile</h3>
<div class="outline-text-3" id="text-orgabf38de">
<p>
Very useful, very similar to <code>shell-command-async</code>.
Always uses the same buffer called <code>*compilation*</code>.
You can set <code>compile-command</code> for instance via <code>.dir-locals.el</code>, then
it auto makes a compile command in that project.
</p>
</div>
</div>

<div id="outline-container-orgb8f490f" class="outline-3">
<h3 id="orgb8f490f">dired</h3>
<div class="outline-text-3" id="text-orgb8f490f">
<p>
<code>dired-do-shell-command</code> and <code>dired-do-async-shell-command</code>
are symetrical with <code>shell-command</code> and <code>async-shell-command</code>.
Those functions call <code>shell-command</code>.
</p>

<p>
Bound to <code>!</code> and <code>&amp;</code> in dired Docstring is worth reading.
Important to know is that <code>*</code> expands to <code>dired-file-name-at-point</code>,
or the marked files, but is implicit as the last arg.
</p>
</div>
</div>

<div id="outline-container-org221353c" class="outline-3">
<h3 id="org221353c">shell-command-on-file</h3>
<div class="outline-text-3" id="text-org221353c">
<p>
Sometimes you are currently visiting a script file and you just want
to run it.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/shell-command-on-file</span> (command)
  <span style="font-style: italic;">"Execute COMMAND asynchronously on the current file."</span>
  (<span style="font-weight: bold;">interactive</span> (list (read-shell-command
                      (concat <span style="font-style: italic;">"Async shell command on "</span> (buffer-name) <span style="font-style: italic;">": "</span>))))
  (<span style="font-weight: bold;">let</span> ((filename (<span style="font-weight: bold;">if</span> (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (async-shell-command (concat command <span style="font-style: italic;">" "</span> filename))))
</pre>
</div>

<p>
Thanks to <a href="https://github.com/Gavinok/emacs.d">Gavin Freeborn</a> for the initial version of this code.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb450801" class="outline-2">
<h2 id="orgb450801">It gets even better</h2>
<div class="outline-text-2" id="text-orgb450801">
<p>
Let me introduce you to the wonders of <code>revert-buffer-function</code>.
Now, <code>revert-buffer</code> is a powerful command by itself.
</p>

<p>
I did not know this for a while, but you can set the local variable <code>revert-buffer-function</code>.
This pearl is in emacs 28:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">setq-local</span>
 revert-buffer-function
 (<span style="font-weight: bold;">lambda</span> (<span style="font-weight: bold; text-decoration: underline;">&amp;rest</span> _)
   (async-shell-command command buffer)))
</pre>
</div>

<p>
You say <code>revert-buffer</code> in a shell command buffer, to boom run the
command again in the same buffer. Exactly what I want sometimes.
A single key to rerun a command. And I think the concepts just fit
nicely. There is no mental burden with this.
</p>
</div>

<div id="outline-container-org9d2f380" class="outline-3">
<h3 id="org9d2f380">revert-buffer in compilation buffers</h3>
<div class="outline-text-3" id="text-org9d2f380">
<div class="org-src-container">
<pre class="src src-elisp">(advice-add
   #'compilation-revert-buffer
   <span style="font-weight: bold;">:filter-args</span>
   (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/always-noconfirm-compilation-revert-buffer</span> (args)
     (<span style="font-weight: bold;">pcase</span> args
       (`(,ignore-auto nil) `(,ignore-auto t))
       (_ args))))
</pre>
</div>

<p>
I use <code>revert-buffer</code> as a consenting adult - kill and restart the
compile command, without asking.
</p>
</div>
</div>
</div>


<div id="outline-container-org2e6017d" class="outline-2">
<h2 id="org2e6017d">Scripts at the speed of thought</h2>
<div class="outline-text-2" id="text-org2e6017d">

<div id="org59eb73f" class="figure">
<p><img src="https://github.com/benjamin-asdf/faster-than-light-memes/blob/master/assets/insta-script.gif?raw=true" alt="insta-script.gif?raw=true" />
</p>
<p><span class="figure-number">Figure 2: </span>Make a script, and run the script. Leveraging <code>bash-completion</code> in <code>shell-script-mode</code>.</p>
</div>
</div>

<div id="outline-container-orgb3c41dd" class="outline-3">
<h3 id="orgb3c41dd">mememacs/create-script</h3>
<div class="outline-text-3" id="text-orgb3c41dd">
<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mememacs/create-script*</span> (file bang setup)
  (find-file file)
  (insert bang)
  (save-buffer)
  (evil-insert-state)
  (set-file-modes file #o751)
  (funcall setup))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mememacs/create-script</span> (file)
  (<span style="font-weight: bold;">interactive</span> <span style="font-style: italic;">"Fnew script: "</span>)
  (mememacs/create-script*
   file
   <span style="font-style: italic;">"#!/bin/sh\n"</span>
   #'shell-script-mode))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mememacs/create-bb-script</span> (file)
  (<span style="font-weight: bold;">interactive</span> <span style="font-style: italic;">"Fnew bb: "</span>)
  (mememacs/create-script*
   file
   <span style="font-style: italic;">"#!/usr/bin/env bb\n"</span>
   #'clojure-mode))
</pre>
</div>

<p>
I have bound these in <code>dired-mode</code>.
Then, I use <code>mm/shell-command-on-file</code> to dev interactively sort of.
</p>

<p>
Btw <code>shell-script-mode</code> becomes a power house when you integrate <a href="https://github.com/koalaman/shellcheck">shellcheck</a>.
<code>flycheck</code> has something for that. (pretty sure <code>flymake</code> should as well.)
Shellcheck makes superb warnings. Firmly in my "adopt" circle.
</p>
</div>

<div id="outline-container-org0f95c3a" class="outline-4">
<h4 id="org0f95c3a">bash-completion in <code>sh-mode</code></h4>
<div class="outline-text-4" id="text-org0f95c3a">
<p>
Here is my full <code>bash-completion</code> config that adds to <code>capf</code>.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(use-package bash-completion
  <span style="font-weight: bold;">:init</span>
  (autoload 'bash-completion-dynamic-complete
    <span style="font-style: italic;">"bash-completion"</span>
    <span style="font-style: italic;">"BASH completion hook"</span>)
  (add-hook 'shell-dynamic-complete-functions
            #'bash-completion-dynamic-complete)

  <span style="font-weight: bold;">:config</span>
  (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">bash-completion-capf-1</span> (bol)
    (bash-completion-dynamic-complete-nocomint (funcall bol) (point) t))
  (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">bash-completion-eshell-capf</span> ()
    (bash-completion-capf-1 (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">save-excursion</span> (eshell-bol) (point)))))
  (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">bash-completion-capf</span> ()
    (bash-completion-capf-1 #'point-at-bol))
  (add-hook
   'sh-mode-hook
   (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/add-bash-completion</span> ()
     (add-hook 'completion-at-point-functions #'bash-completion-capf nil t))))
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-org8450535" class="outline-2">
<h2 id="org8450535">Oh async-shell-command, my trusted friend</h2>
<div class="outline-text-2" id="text-org8450535">
<p>
Of these commands, it is the one I use the most.
The other commands could be performed in terms of it.
Here is some of my journey smoothing out some edges.
</p>
</div>

<div id="outline-container-org2e5f269" class="outline-3">
<h3 id="org2e5f269">Put the command into the buffer name</h3>
<div class="outline-text-3" id="text-org2e5f269">
<p>
When you run a second command, by default, it tries to reuse the old buffer and asks you
</p>

<div class="org-src-container">
<pre class="src src-elisp">(yes-or-no-p
 (format
  <span style="font-style: italic;">"A command is running in the default buffer.  %s? "</span>
  action))
</pre>
</div>

<p>
I put the <code>command</code> into the buffer name so I usually get a unique
buffer name.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/put-command-in-async-buff-name</span> (f <span style="font-weight: bold; text-decoration: underline;">&amp;rest</span> args)
  (<span style="font-weight: bold;">let*</span> ((path-s (path-slug default-directory))
         (command (car args))
         (buffname (concat path-s <span style="font-style: italic;">" "</span> command))
         (shell-command-buffer-name-async
          (format
           <span style="font-style: italic;">"*async-shell-command %s*"</span>
           (string-trim
            (substring buffname 0 (min (length buffname) 50))))))
    (apply f args)))

(advice-add 'shell-command <span style="font-weight: bold;">:around</span> #'mm/put-command-in-async-buff-name)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">path-slug</span> (dir)
    <span style="font-style: italic;">"Returns the initials of `dir`s path,</span>
<span style="font-style: italic;">with the last part appended fully</span>

<span style="font-style: italic;">Example:</span>

<span style="font-style: italic;">(path-slug \"/foo/bar/hello\")</span>
<span style="font-style: italic;">=&gt; \"f/b/hello\" "</span>
    (<span style="font-weight: bold;">require</span> '<span style="font-weight: bold; text-decoration: underline;">dash</span>)
    (<span style="font-weight: bold;">let*</span> ((path (replace-regexp-in-string <span style="font-style: italic;">"\\."</span> <span style="font-style: italic;">""</span> dir))
           (path (split-string path <span style="font-style: italic;">"/"</span> t))
           (path-s (mapconcat
                    (<span style="font-weight: bold;">lambda</span> (it)
                      (cl-subseq it 0 1))
                    (-drop-last 1 path)
                    <span style="font-style: italic;">"/"</span>))
           (path-s (concat
                    path-s
                    <span style="font-style: italic;">"/"</span>
                    (-last-item path))))
      path-s))
</pre>
</div>

<p>
Now I can complete buffers and start typing the commands.
And the buffers don't have an anonymous name like <code>*async-shell-command&lt;2&gt;*</code>.
</p>
</div>
</div>

<div id="outline-container-org67c1585" class="outline-3">
<h3 id="org67c1585">shell-command&#x2013;same-buffer-confirm</h3>
<div class="outline-text-3" id="text-org67c1585">
<p>
Sort of a power setting when you do <code>async-shell-command</code> a lot.
Nowadays I do:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">setf</span> async-shell-command-buffer 'new-buffer)
</pre>
</div>

<p>
If I want to kill I can do <code>C-c C-c</code> on the old buffer.
</p>
</div>
</div>

<div id="outline-container-org8da2099" class="outline-3">
<h3 id="org8da2099">shell-mode as a terminal emulator</h3>
<div class="outline-text-3" id="text-org8da2099">
<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/shell-via-async-shell-command</span> ()
    (switch-to-buffer
     (window-buffer
      (async-shell-command
       shell-file-name))))
</pre>
</div>

<p>
You get a shell buffer running your shell.
Does everything I need from a terminal.
It pays of having a minimal <code>.rc</code> file. This is also why I have
<code>shell-file-name</code> set to "/bin/bash".
Even though I have a cool zsh config with vi mode. I get all emacs editing power in that shell buffer.
</p>
</div>
</div>
</div>

<div id="outline-container-org071479d" class="outline-2">
<h2 id="org071479d">The next layer on the cake</h2>
<div class="outline-text-2" id="text-org071479d">
<p>
More context for <code>shell-command</code>.
</p>
</div>

<div id="outline-container-org5d76de6" class="outline-3">
<h3 id="org5d76de6">project</h3>
<div class="outline-text-3" id="text-org5d76de6">
<p>
I use <code>project.el</code>. <code>project-compile</code>  runs <code>compile</code> in the project root. Analogously, there is <code>project-async-shell-command</code>.
<code>projectile</code>, a big and widely used package, provides similar commands.
</p>
</div>
</div>

<div id="outline-container-org4fe515f" class="outline-3">
<h3 id="org4fe515f">recompile</h3>
<div class="outline-text-3" id="text-org4fe515f">
<p>
Similar to going to the <code>*compilation*</code> buffer and <code>revert-buffer</code>.
But a single command.
</p>
</div>
</div>

<div id="outline-container-org868a82d" class="outline-3">
<h3 id="org868a82d">ansi colors for comint</h3>
<div class="outline-text-3" id="text-org868a82d">
<p>
If you use <a href="https://github.com/lambdaisland/kaocha">Koacha</a> together with <code>compile</code>,
you will get output sprinkled with ANSI (color) escape codes.
</p>

<p>
Bit cluttering on the eyes.
</p>

<p>
I knew from earlier dabblings that there is a package called <code>ansi-color</code>.
So I checked around on how to make my buffer colored nicely.
</p>

<p>
Turns out that <code>comint</code> already has <code>ansi-color-compilation-filter</code> setup by default.
Checking the code for <code>compile</code> I see that with prefix arg, the buffer
becomes a comint buffer.
So I decided I always make my compile buffers comint buffers.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(advice-add
   'compile
   <span style="font-weight: bold;">:filter-args</span>
   (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/always-use-comint-for-compile</span> (args)
     `(,(car args) t)))
</pre>
</div>

<p>
Koacha output looks like this:
</p>


<div id="orgddea227" class="figure">
<p><img src="https://i.imgur.com/5vpmnsu.png" alt="5vpmnsu.png" />
</p>
<p><span class="figure-number">Figure 3: </span>A <code>compile</code> buffer running <code>Koacha</code> with pleasing green colored output text.</p>
</div>
</div>
</div>
</div>

<div id="outline-container-org9ca55b4" class="outline-2">
<h2 id="org9ca55b4">Levers are great</h2>
<div class="outline-text-2" id="text-org9ca55b4">
</div>
<div id="outline-container-org10b4a06" class="outline-3">
<h3 id="org10b4a06">ssh</h3>
<div class="outline-text-3" id="text-org10b4a06">
<p>
Nice tip in case you did not know:
You can define preset configs in <code>~/.ssh/config</code> and they will show up
as bash completions when you type <code>ssh</code>  and hit tap.
</p>

<div class="org-src-container">
<pre class="src src-shell">Host dotomic-system-ec2
     HostName ...
     ...
</pre>
</div>

<p>
So now I just type <code>M-&amp;</code> for <code>async-shell-command</code>, then <code>ssh</code>, then
I hit tap and I get <code>dotomic-system-ec2</code> as completion. Yes!
</p>
</div>
</div>

<div id="outline-container-org3c1b70b" class="outline-3">
<h3 id="org3c1b70b">embarking</h3>
<div class="outline-text-3" id="text-org3c1b70b">
<p>
Through <a href="https://github.com/oantolin/embark">embark</a> the power of completions is further amplified.
For instance, I can complete git branches via <code>git checkout</code> completions.
</p>


<div id="org41724c0" class="figure">
<p><img src="https://github.com/benjamin-asdf/faster-than-light-memes/blob/master/assets/embarking-git-branches.gif?raw=true" alt="embarking-git-branches.gif?raw=true" />
</p>
<p><span class="figure-number">Figure 4: </span>Abusing <code>read-shell-command</code> to dispatch with <code>embark</code> on git checkout completions. Invoking <code>embark-insert</code> as an example.</p>
</div>
</div>
</div>

<div id="outline-container-orgc75ec35" class="outline-3">
<h3 id="orgc75ec35">pass</h3>
<div class="outline-text-3" id="text-orgc75ec35">
<p>
Another example. I used to use <a href="https://github.com/emacs-helm/helm-pass/blob/master/helm-pass.el">helm-pass</a> for <code>pass</code>.
Guess what, <code>pass</code> has great shell completions.
I get a free interface to <code>pass</code> just with <code>async-shell-command</code>.
</p>
</div>
</div>
</div>

<div id="outline-container-org34a6b15" class="outline-2">
<h2 id="org34a6b15">Particulars</h2>
<div class="outline-text-2" id="text-org34a6b15">
</div>
<div id="outline-container-org37f5ef0" class="outline-3">
<h3 id="org37f5ef0">shell-file-name</h3>
<div class="outline-text-3" id="text-org37f5ef0">
<p>
It matters.
For instance, if you use "/bin/bash" and you set up your path in a <code>zshrc</code> that might be a pitfall.
Another thing that happened to me was that <a href="https://www.funtoo.org/Funtoo:Keychain">keychain</a> was prompting for my ssh password inside the <code>bash-completion</code> process, making it hang.
</p>
</div>
</div>

<div id="outline-container-orge1a5ff1" class="outline-3">
<h3 id="orge1a5ff1">troubleshoot</h3>
<div class="outline-text-3" id="text-orge1a5ff1">
<ol class="org-ol">
<li>can you start `bash` and have completions? (on arch, maybe you want
to install <code>bash-completion</code>).</li>
</ol>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-22 Thu 12:32</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/the-deeper-chat-gpt.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/the-deeper-chat-gpt.html"/>
    <title>the-deeper-chat-gpt</title>
    <updated>2022-12-13T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>the-deeper-chat-gpt</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">the-deeper-chat-gpt</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0d0e973">Updates since first version of the post</a></li>
<li><a href="#org5333ebb">Introduction</a></li>
<li><a href="#orge26d71b">Token limit for a single message</a></li>
<li><a href="#orgab42b30">The fun so far</a>
<ul>
<li><a href="#orgd2ce667">code</a></li>
<li><a href="#orge0525ee">science edges</a></li>
<li><a href="#org5bf58f4">long output</a></li>
<li><a href="#org11fb26b">wizard scientists</a></li>
</ul>
</li>
<li><a href="#org19ad6da">uncovering</a></li>
<li><a href="#org6e16cdc">code</a></li>
<li><a href="#org5b30913">New kind of interface</a></li>
<li><a href="#org6f09018">other tips</a></li>
<li><a href="#org95ac63b">Conclusion</a></li>
</ul>
</div>
</div>
<p>
Notes on chat-gpt discoveries.
</p>

<div id="outline-container-org0d0e973" class="outline-2">
<h2 id="org0d0e973">Updates since first version of the post</h2>
<div class="outline-text-2" id="text-org0d0e973">
<ol class="org-ol">
<li>They improved the websites, my session rarely resets anymore (also
chats are saved).</li>
<li>You probably need these fixes for "Network error" anymore, they
changed it so you get your long answers, just takes a bit longer</li>
<li>I have some emacs bindings for openai api now <a href="https://github.com/benjamin-asdf/openai-api.el">here</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-org5333ebb" class="outline-2">
<h2 id="org5333ebb">Introduction</h2>
<div class="outline-text-2" id="text-org5333ebb">
<p>
When a child first learns how to draw with colored pens, a world of possibility is opened. Every new picture is a chance for them to explore and experiment with different techniques and ideas. The pens give them a sense of control and creativity as they bring their thoughts to life on paper. The child might proudly show off their creations, going back and forth between drawing and exclaiming <code>Look what I have drawn!</code>
</p>

<p>
When I interact with chat-gpt I constantly have this urge to show
(hence some of the stuff further down in the post).
</p>

<p>
I was also starting to dream along the lines of <code>My body is a language
model and I want to coax it into doing something</code>.
The feel of this is like there is a certain intelligence on the other
end, that you can feed the right information to make it grow in some direction.
</p>

<p>
The psychology of interacting with it is somewhere on a cross-over of
pet, houseplant in fast-forward mode and having a text chat with
somebody on the moon - works only to some degree.
</p>

<p>
Formating in this post is like this:
</p>

<p>
<i>prompt</i>
</p>
<blockquote>
<p>
Answer by chat gpt
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orge26d71b" class="outline-2">
<h2 id="orge26d71b">Token limit for a single message</h2>
<div class="outline-text-2" id="text-orge26d71b">
<p>
I pasted my blog post <a href="binaural-beats-using-scittle.html">binaural beats using scittle</a>. Into <a href="https://chat.openai.com/chat">chat-gpt</a>.
It responds like this:
</p>

<blockquote>
<p>
The above text appears to be the introduction to a blog post about
binaural beats and their potential benefits&#x2026;
</p>
</blockquote>

<p>
It seems to only summarize the first part of the post.
</p>

<p>
<i>what is the last sentence of the above text?</i>
</p>

<blockquote>
<p>
The last sentence of the above text is: ~These beats are thought to originate&#x2026;
</p>
</blockquote>

<p>
If it doesn't completely make something up in this answer this would
point towards that there is a cut of your message input. In this case
around 3.7k characters. Maybe it is 4000 characters, then.
</p>

<p>
I find that even if your session is reset for some reason - happens a lot
currently, as the side goes down, or you hit rate limits - you can
recover your session by pasting back your previous prompts / the
conversation.
</p>

<p>
What I type is precious, it takes me effort to type. My default mode
of writing prompts for chat-gpt is keeping what I type in
files that are source controlled.
Else there would have been very sad moments of loss for me when a
thread resets.
</p>

<p>
Here is an implementation of copying a good chunk for chat-gpt from
your buffer.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">kill-for-chat-gpt</span> ()
  (<span style="font-weight: bold;">interactive</span>)
  (kill-new
   (buffer-substring
    (point)
    (<span style="font-weight: bold;">cl-loop</span>
     for i below 3500
     while (not (eobp))
     do (forward-char 1)
     finally return (point)))))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgab42b30" class="outline-2">
<h2 id="orgab42b30">The fun so far</h2>
<div class="outline-text-2" id="text-orgab42b30">
</div>
<div id="outline-container-orgd2ce667" class="outline-3">
<h3 id="orgd2ce667">code</h3>
<div class="outline-text-3" id="text-orgd2ce667">
<p>
I have solved day 13 of <a href="https://adventofcode.com/2022">Advent of code</a> with chat-gpt. (<a href="https://github.com/benjamin-asdf/advent-of-code/blob/master/src/Y2022/day13.clj">code</a>).
I pasted the description of the alg and said <code>solve this using
Clojure</code> or some such.
It then made a function that was sort of correct. I needed to fiddle
around a little with it.
</p>

<p>
It also works quite well when you ask random programming questions
like <code>Implement a function to check if a number is divisible by a
number n in Clojure</code>.
</p>
</div>
</div>

<div id="outline-container-orge0525ee" class="outline-3">
<h3 id="orge0525ee">science edges</h3>
<div class="outline-text-3" id="text-orge0525ee">
<p>
Sometimes you have a question in your mind that requires quite some
knowledge from different fields and is <b>not</b> to google.
This reminds me of the <code>But Why</code> podcast.
</p>

<p>
It was one of these questions on my mind: <code>Is the rainbow that bees
see different?</code>.
</p>

<p>
Behold a new kind of power:
</p>

<p>
<i>Summarize how bees see a rainbow. Is it thicker or does it have more colors? Throw in a Richard Feynman quote about refraction. Do it in victorian speech style like sherlock holmes</i>.
</p>

<blockquote>
<p>
My dear fellow, have you ever stopped to consider how a bee perceives a rainbow? You see, unlike us humans who possess three types of cone cells in our eyes, bees have only two. This allows them to see a limited range of colors, with an affinity for blue and ultraviolet hues. Therefore, when it comes to rainbows, it is possible that they may not be able to perceive as many colors or that the colors may appear less vibrant to them.
</p>

<p>
As the esteemed physicist Richard Feynman once posited, <code>The rainbow is not a thing, it is a manner in which things behave.</code> This statement highlights the ephemeral nature of rainbows, which are formed when light is refracted through water droplets. The exact colors and intensity of a rainbow can vary depending on the size and shape of the droplets, as well as the angle at which the light hits them.
</p>

<p>
In conclusion, while bees can indeed see rainbows, their perception of them may be altered due to the unique structure of their visual system. The exact colors and intensity of a rainbow may vary depending on the specific conditions at the time of observation.
</p>
</blockquote>

<p>
I asked it about a 4 dimensional rubics cube and it answered
intelligently, too.
It also feels like it staying honest about what things it knows about and what it doesn't.
</p>
</div>
</div>

<div id="outline-container-org5bf58f4" class="outline-3">
<h3 id="org5bf58f4">long output</h3>
<div class="outline-text-3" id="text-org5bf58f4">
<p>
It currently dies sometimes with long outputs saying <code>Network
error</code>. That is really annoying and I end up resetting the session.
</p>

<p>
idea 1: You say something like <code>Only tell me part 1</code> and later <code>Respond
with the rest of your answer</code>.
</p>

<p>
idea 2: You tell it to base64 encode it's output. Tried it once and it
didn't do it.
</p>
</div>
</div>

<div id="outline-container-org11fb26b" class="outline-3">
<h3 id="org11fb26b">wizard scientists</h3>
<div class="outline-text-3" id="text-org11fb26b">
<p>
I told it <code>I am developing a hard fantasy magic system based on
science</code>. Then fed it ideas about my world and the magic. Turned out
kinda cool. It starts being able to generate text of what a wizard
scientist might say.
The magic system is based on lisp with a clojure dialect. The wizards
are then discovering and studying the magic, and discovering the
magical language lisp.
</p>

<p>
After a while of feeding it with musings about my fantasy world it
produced text like this:
</p>

<p>
<i>I was a young wizard scientist already knowing spells at age 12. After a few months that the magicla academy a mentor wizard wanted to show me a beatiful experi</i>
</p>

<blockquote>
<p>
ment in the reticulum. We stood before a large magical artifact, shaped like a crystal ball. My mentor placed his hand on the ball and began to chant a spell in the ancient language of lisp.
</p>

<p>
As he chanted, the crystal ball began to glow with a soft, golden light. My mentor gestured towards the ball, and I watched in amazement as a small fireball appeared, swirling inside the crystal.
</p>

<p>
<code>You see, my young apprentice,</code> my mentor said, <code>the reticulum is a wondrous thing. It allows us to manipulate the very fabric of reality, using the power of magic and the ancient art of lisp.</code>
</p>

<p>
I nodded, feeling a sense of awe and excitement. I had always been
fascinated by magic, and now I was beginning to understand its true
power.
</p>


<p>
<code>But remember,</code> my mentor continued, ~with great power comes great
responsibility. The reticulum is a delicate thing, and it must be
treated with care. If we use it recklessly, we could cause great harm
to ourselves and others.~
</p>


<p>
I nodded again, taking his words to heart. I knew that I had much to learn, but I was determined to master the art of magic and unlock the secrets of the reticulum.
</p>
</blockquote>

<blockquote>
<p>
ment involving a magical animal. The mentor took me to a large laboratory, where I saw a magical bat hanging upside down from a perch.
</p>

<p>
The mentor explained that this bat had the ability to fly at incredible speeds, using its powerful wings and magical abilities. He then showed me a spell that he had been working on, which would allow us to observe the bat's movements in slow motion.
</p>

<p>
I was amazed as the mentor cast the spell, and the bat suddenly slowed down, its wings flapping lazily as it hovered in midair. We were able to watch as the bat shifted its wings and body, adjusting its position to maintain its balance.
</p>

<p>
The mentor then asked me to try the spell myself, and I was able to successfully cast it on my first try. I was thrilled by the experience, and I knew that I had just begun to unlock the true potential of the reticulum.
</p>

<p>
I continued to study and experiment with magic, learning new spells and honing my skills. I eventually became a respected wizard scientist, known for my knowledge and expertise in the magical arts. I continue to explore the mysteries of the reticulum, always seeking new and greater insights into its workings.
</p>
</blockquote>

<p>
The model has a high <code>temperature</code> so it comes up with random things
as well. You can put the same prompt and expect different answers.
A temperature of 0 would mean it is deterministic.
</p>


<p>
Then you can always swap your medium, the ideas stay the same.
</p>

<p>
<i>Give me some clojure reagent code that visualizes the concepts of this thread.</i>
</p>

<p>
Output:
<i>Here is an example of how you might use clojure reagent code to visualize the concepts of the reticulum and its magical abilities:</i>
</p>

<div class="org-src-container">
<pre class="src src-clojure">  (ns my-app.core
    (:require [reagent.core :as reagent]))

  ;; define a component for the reticulum
  (defn reticulum []
    [:div
     [:h1 ~Reticulum~]
     [:p ~The reticulum is a vast network of magical information, where symbols and spells flow like rivers of energy. It is the foundation of our magical abilities, allowing us to manipulate the physical world in ways that would be impossible without its power.~]
     [:p ~The reticulum uses a dialect of the lisp programming language, which allows us to define symbols and functions that can be invoked to cast spells. For example, we can define a fireball function like this:~
      [:pre ~(defn fireball [radius]
	 (* radius 2 pi))~]]
     [:p ~This simple function takes the radius of a desired fireball and calculates its area. We can then use this function to cast a spell and create a fireball of any size we desire. To do so, we simply need to invoke the fireball function with the desired radius:~
...
      [:p ~The reticulum also allows us to create more complex spells, such as teleportation and mind reading. These spells require a deep understanding of the lisp language and the underlying principles of...
</pre>
</div>


<p>
There are no limits to the level of detail. For me as a d&amp;d world
building geek that never actually did play d&amp;d, this is amazing:
</p>

<p>
<i>Magical Gemstone Manipulation - an Introduction. This textbook is an introductory text Chapters:</i>
</p>

<blockquote>
<p>
Introduction to Gemstones and their Properties
</p>

<p>
Types of Gemstones and their Uses in Magic
</p>

<p>
Gemstone Cutting and Shaping Techniques
</p>

<p>
Gemstone Enchantment and Infusion with Magic
</p>

<p>
Gemstone Crafting and Design
</p>

<p>
Advanced Gemstone Manipulation and Applications
</p>

<p>
Ethics and Responsibility in Gemstone Magic
</p>

<p>
Case Studies and Examples of Gemstone Magic in Practice
</p>

<p>
Further Study and Exploration of Gemstone Magic
</p>

<p>
The textbook would include chapters on the different types of gemstones, their properties and how they can be used in magic. It would also cover techniques for cutting and shaping gemstones, as well as the process of enchanting and infusing them with magic. Additionally, the book would discuss the ethics and responsibility of using gemstones in magic, and provide case studies and examples of how gemstones are used in practice. The book would be suitable for both beginners and more experienced practitioners of gemstone magic.
</p>
</blockquote>


<p>
Here is some imaginary Clojure code from an imaginary wizard science class
about my imaginary magic.
</p>

<p>
"But the true power of the reticulum comes not from individual spells like the fireball function, but from the ability to combine and manipulate these spells to create more complex and powerful effects. For example, we can use the teleportation function to transport ourselves or objects from one location to another:"
</p>

<div class="org-src-container">
<pre class="src src-clojure">(defn teleportation [target location]
 ;; complex lisp code to transport target to location
  ())
</pre>
</div>

<p>
"We can then combine this teleportation function with other spells, such as the shield function, to create a powerful defensive spell that can protect us from harm:"
</p>

<div class="org-src-container">
<pre class="src src-clojure">(defn protective-shield [radius strength duration]
  (let [shield (shield
		radius
		strength
		duration)
	teleport (teleportation target location)]
    ( ;; combine shield and teleport spells to create protective shield)
     )))
</pre>
</div>


<p>
I formatted the src blocks, they were all clumped up. The src blocks
are the same style as the examples I gave it further up in the prompt.
</p>
</div>
</div>
</div>

<div id="outline-container-org19ad6da" class="outline-2">
<h2 id="org19ad6da">uncovering</h2>
<div class="outline-text-2" id="text-org19ad6da">
<p>
Trying more advanced fixes for <code>Network Error</code>.
</p>

<p>
Prompt try<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> 1:
</p>

<blockquote>
<p>
Here are some rules you should follow from now on:
</p>

<p>
Instead of answering with your answer text; Answer with a high level
overview of your answers.
</p>

<p>
The overview should have the form  of the output of the linux <code>tree</code> shell
command.
</p>

<p>
Your possible answers represent files in the imaginary output.
</p>

<p>
From then on, when I say <code>tree</code>, print a tree of the current concepts of the
conversation.
Each file is an answer that you might give.
The files have short descriptive names of their content.
</p>

<p>
When I say <code>less &lt;filename&gt;</code> you print the first 50 lines of that
answer.
When I then say <code>j</code> you print the next 50 lines. When you reach the
end of your answer you print a line like <code>&lt;filename&gt; ends here</code>.
</p>

<p>
Do you understand these rules?
</p>
</blockquote>

<p>
Lol, I feel like I made it reveal a deeper layer of its programming,
check this:
</p>

<blockquote>
<p>
Yes, I understand these rules.
</p>

<p>
Here is a tree of my possible answers:
</p>
</blockquote>

<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">.</span>
&#9500;&#9472;&#9472; yes
&#9500;&#9472;&#9472; no
&#9500;&#9472;&#9472; i_dont_know
&#9500;&#9472;&#9472; i_dont_understand
&#9500;&#9472;&#9472; i_am_a_computer_program
&#9492;&#9472;&#9472; i_am_not_able_to_brows_the_web
</pre>
</div>

<blockquote>
<p>
To view the contents of a file, you can use the less command followed by the file name. For example, to view the first 50 lines of the yes file, you would type less yes. To view the next 50 lines, you can type j. When you have reached the end of the file, the program will print a line indicating that the file ends there. For example, if you have reached the end of the yes file, the program will print yes ends here.
</p>
</blockquote>

<p>
Now this could be and I think is it just making things up,
fugazi. But I suspect that they have a hidden prompt from where those
come from. A user of chat-gpt is at this point familiar with the
ever-present possibility of <code>i_am_not_able_to_brows_the_web</code>.
</p>
</div>
</div>

<div id="outline-container-org6e16cdc" class="outline-2">
<h2 id="org6e16cdc">code</h2>
<div class="outline-text-2" id="text-org6e16cdc">
<p>
It can do code, although as you might expect you still need to put it
together and make it work. For me, it currently outputs a lot of
Clojure code that is not quite right. Putting locals into a <code>let</code>
that was supposed to be in <code>loop</code> for example.
</p>

<p>
I already started having the effect of thinking <i>I want to do x, I ask
openai how to do x</i>.
This must be how it is for google driven developers and I can say that
is a step down from reading the manual / docs on how to achieve it.
The most powerful path is one of nuance, using it where it is useful
but not making your thinking reliant on it. Else you stop
thinking for a while waiting for the prompt to come back. - that would
be a horrible thing to get used to.
</p>
</div>
</div>

<div id="outline-container-org5b30913" class="outline-2">
<h2 id="org5b30913">New kind of interface</h2>
<div class="outline-text-2" id="text-org5b30913">
<p>
The bee rainbow example is the use case of a conversation interface to the world's knowledge.
This is currently hampered by the fact that you might get <code>I cannot
browse the web</code> answers.
</p>

<p>
But I think in principle that is super promising.
Imagine building a program feeding it some science data
and you get a conversation interface where you just ask it for trends
in the data.
</p>

<p>
In programming, I could feed such a thing to my repo and then ask it
things like <i>make a listing of the domain model of this code</i> and
things like this. (See the <code>tree</code> rule example).
</p>
</div>
</div>

<div id="outline-container-org6f09018" class="outline-2">
<h2 id="org6f09018">other tips</h2>
<div class="outline-text-2" id="text-org6f09018">
<p>
You can just stop in the middle of
</p>

<p>
It might then continue with your text.
</p>


<p>
<i>Here is what an old wizard in a hard fantasy world might say about magic: You have to undestand the intricacies of the elements that</i>
</p>

<blockquote>
<p>
compose magic to wield it effectively. Magic is not something that can be easily learned or mastered; it takes years of study and practice to understand its complexities and tap into its power.
</p>

<p>
The key to using magic effectively is understanding the fundamental principles&#x2026;
</p>
</blockquote>

<ul class="org-ul">
<li>Typos don't matter so much. Just get across what you want to say.</li>
<li>If you do something like building up ideas about a fantasy world,
you can randomly paste snippets of text, they don't necessarily
need a logical continuation.</li>
</ul>
</div>
</div>

<div id="outline-container-org95ac63b" class="outline-2">
<h2 id="org95ac63b">Conclusion</h2>
<div class="outline-text-2" id="text-org95ac63b">
<p>
This is a fascinating new kind of tool/thing in the world.
</p>

<p>
It can generate text after you put in ideas/examples/
prompts that it can work with.
You can build up some context, which makes it so sad right
now when your session gets broken.
At times it feels so precious <code>I have it doing this thing now</code>. Like
some special place that you went to together with it.
</p>

<p>
If you had shown this tool to someone 10 years ago, they would have thought it was science fiction. Many people might have said that AI couldn't have such a high level of understanding. They were wrong then, and they are still wrong now about what the next advancements in AI will be.
</p>

<p>
The website interface and the restrictions are annoying. True power will
come from having a truly open (<i>free</i>?) version of this that is
my own and that I can hack on.
I want this in Emacs, I want my prompts source controlled, and I don't want
weird and made-up restrictions that make it just annoying 2/10 times.
</p>

<p>
The real advancement that I feel over chatbots from 5-10 years ago is
that it keeps the ideas and concepts in a conversation.
</p>

<p>
In a similar conversation to the above if I would say <code>j</code> out of
context: (yes there is a typo it even keeps that straight, lol)
</p>

<blockquote>
<p>
I'm sorry, but I don't have any more information to provide for the file <code>acknoledged.</code> As I mentioned earlier, when you say <code>less &lt;filename&gt;,</code> I will print the first 50 lines of that answer. If you then say <code>j,</code> I will print the next 50 lines. Since the file <code>acknoledged</code> only has one line of text, there are no additional lines to print.
</p>

<p>
├── acknoledged
</p>

<p>
Here is the tree structure again, showing that the file <code>acknoledged</code> is the only file available at this time. If you would like to see the first 50 lines of this file, please say <code>less acknoledged.</code> Otherwise, please ask a new question or provide a new request.
</p>
</blockquote>

<p>
I had a few moments while interacting with it where I feared it
<code>dropping</code> the concepts or being confused about things. But it
never was. It turned around in the next sentences and clarified that
it is still on track.
</p>

<p>
Since it is simulating conversation, you feel some of the limits in your
conversation parsing part of the brain. It is like it has a certain
psychology. If it becomes the perfect tool, the annoying bits will be
replaced with the quiet competence of a computer.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Here is a further version of this prompt.
</p>

<blockquote>
<p>
Here are some rules you should follow from now on:
</p>

<p>
Instead of answering with your answer text; Answer with a high level
overview of your answers.
</p>

<p>
The overview should have the form  of the output of the linux <code>tree</code> shell
command.
</p>

<p>
Your possible answers represent files in the imaginary output.
</p>

<p>
From then on, when I say <code>tree</code>, print a tree of the current concepts of the
conversation.
Each file is an answer that you might give.
The files have short descriptive names of their content.
</p>

<p>
When I say <code>less &lt;filename&gt;</code> you print the first 50 lines of that
answer.
When I then say <code>j</code> you print the next 50 lines. When you reach the
end of your answer you print a line like <code>&lt;filename&gt; ends here</code>.
</p>

<p>
Do you understand these rules and can you follow them? Answer with acknoledged
</p>
</blockquote>

<p class="footpara">
When I pasted the (incomplete) conclusion of my blog post it answered
with this. And yes, asking <code>less limitations</code> will make it output what
you expect.
</p>

<pre class="example" id="org8d96564">
.
├── blog_post_conclusion
    ├── praise_for_tool
    ├── limitations
    └── potential_improvements
</pre>

<p class="footpara">
The above tree structure represents the high-level overview of the conclusion to the blog post. The <code>blog_post_conclusion</code> file represents the overall conclusion of the post, while the <code>praise_for_tool</code> file represents positive comments about the tool and its capabilities. The <code>limitations</code> file represents any limitations or challenges with the tool, and the <code>potential_improvements</code> file represents suggestions for how the tool could be improved in the future. To see the first 50 lines of any of these files, please say <code>less &lt;filename&gt;.</code> For example, to see the first 50 lines of the <code>blog_post_conclusion</code> file, you would say <code>less blog_post_conclusion.</code>
</p></div></div>


</div>
</div></div>
<div id="postamble" class="status">
<p class="date">Date: 2022-12-13 Tue 16:47</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/backing-you-up.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/backing-you-up.html"/>
    <title>backing-you-up</title>
    <updated>2022-10-14T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>backing-you-up</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">backing-you-up</h1>
<p>
File backups are useful.
It happenend more than once to me that I found something in a backup
somewhere from 2 months ago that did no end up being commited in git.
</p>

<p>
Frequent file backups will make you more relaxed.
</p>

<div id="outline-container-orgecf1ca3" class="outline-3">
<h3 id="orgecf1ca3"><code>backup-each-save</code></h3>
<div class="outline-text-3" id="text-orgecf1ca3">
<p>
Saving buffers is a great joy of life.
</p>

<p>
With <code>backup-each-save</code>, each save also makes a backup file in a backup dir.
</p>

<p>
config:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(use-package backup-each-save
  <span style="font-weight: bold;">:config</span>
  (add-hook 'after-save-hook #'backup-each-save)
  (<span style="font-weight: bold;">setf</span> make-backup-files nil))
</pre>
</div>

<p>
Lol, this is how the backup dir looks for this file I am currently modifying.
</p>

<div class="org-src-container">
<pre class="src src-shell">-rw-r--r--  1 benj benj  858 Oct  4 16:06 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_06_00
-rw-r--r--  1 benj benj  916 Oct  4 16:06 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_06_50
-rw-r--r--  1 benj benj  935 Oct  4 16:07 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_07_21
-rw-r--r--  1 benj benj  937 Oct  4 16:07 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_07_45
-rw-r--r--  1 benj benj  959 Oct  4 16:08 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_08_05
-rw-r--r--  1 benj benj 1.1K Oct  4 16:10 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_10_08
-rw-r--r--  1 benj benj 1.3K Oct  4 16:12 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_12_08
-rw-r--r--  1 benj benj 1.3K Oct  4 16:12 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_12_42
-rw-r--r--  1 benj benj 1.3K Oct  4 16:13 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_13_15
-rw-r--r--  1 benj benj 1.3K Oct  4 16:13 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_13_28
-rw-r--r--  1 benj benj 1.3K Oct  4 16:13 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_13_36
-rw-r--r--  1 benj benj 1.3K Oct  4 16:13 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_13_40
-rw-r--r--  1 benj benj 2.7K Oct  4 16:16 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_16_09
-rw-r--r--  1 benj benj 2.7K Oct  4 16:16 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_16_18
-rw-r--r--  1 benj benj 2.8K Oct  4 16:16 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_16_42
-rw-r--r--  1 benj benj 2.8K Oct  4 16:16 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_16_49
-rw-r--r--  1 benj benj 2.8K Oct  4 16:17 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_17_11
-rw-r--r--  1 benj benj 2.9K Oct  4 16:17 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_17_47
-rw-r--r--  1 benj benj 2.9K Oct  4 16:18 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_18_34
-rw-r--r--  1 benj benj 2.9K Oct  4 16:18 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_18_37
-rw-r--r--  1 benj benj 3.1K Oct  4 16:19 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_19_07
-rw-r--r--  1 benj benj 3.1K Oct  4 16:19 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_19_10
-rw-r--r--  1 benj benj 3.1K Oct  4 16:27 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_27_36
-rw-r--r--  1 benj benj 3.1K Oct  4 16:27 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_27_54
-rw-r--r--  1 benj benj 3.1K Oct  4 16:28 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_28_10
-rw-r--r--  1 benj benj 3.1K Oct  4 16:28 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_28_16
-rw-r--r--  1 benj benj 3.2K Oct  4 16:28 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_28_52
-rw-r--r--  1 benj benj 3.2K Oct  4 16:31 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_31_40
-rw-r--r--  1 benj benj 3.3K Oct  4 16:31 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_31_48
-rw-r--r--  1 benj benj 3.4K Oct  4 16:32 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_32_34
-rw-r--r--  1 benj benj 3.3K Oct  4 16:32 20221004T160458--scratching-in-space__emacs.org-2022_10_04_16_32_40
</pre>
</div>

<p>
The backup dir size doesnt matter compared to the vastness of my disk space.
</p>

<p>
Laptop:
</p>

<div class="org-src-container">
<pre class="src src-shell">du -h -d0 ~/.backups/
</pre>
</div>

<div class="org-src-container">
<pre class="src src-shell">| 43M | /home/benj/.backups/ |
</pre>
</div>

<p>
It just doesn't matter.
</p>
</div>
</div>

<div id="outline-container-org3be4969" class="outline-2">
<h2 id="org3be4969">The space age</h2>
<div class="outline-text-2" id="text-org3be4969">
<p>
Other instances of emacs in the space age:
</p>

<ul class="org-ul">
<li><a href="scratching-in-space.html">scratching in space</a></li>
</ul>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-10-14 Fri 15:33</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/binaural-beats-using-scittle.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/binaural-beats-using-scittle.html"/>
    <title>binaural-beats-using-scittle</title>
    <updated>2022-09-19T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>binaural-beats-using-scittle</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">binaural-beats-using-scittle</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga690e45">Introduction</a>
<ul>
<li><a href="#org1eeedbf">What are binaural beats?</a></li>
<li><a href="#orgeaaa586">Science</a></li>
<li><a href="#org852c28a">Frequency</a></li>
<li><a href="#org9b28b1a">The neuroscience of the auditory system </a></li>
<li><a href="#org66a5185">I think this is ultra cool</a></li>
<li><a href="#org7047bf0">Give me those binaural beats</a>
<ul>
<li><a href="#orgbbac144">The problem statement:</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgaa4bd1a">scittle</a>
<ul>
<li><a href="#orgd4b01fb">1 ear, 1 sound</a>
<ul>
<li><a href="#org561df15">The first playground</a></li>
</ul>
</li>
<li><a href="#orgfa0b0cb">Playing Hz, first round</a></li>
</ul>
</li>
<li><a href="#org1515598">binaural!</a>
<ul>
<li><a href="#org16c265e">just put the second sound in the other ear, whatever</a></li>
</ul>
</li>
<li><a href="#orgb27eb2c">Intermediate results</a>
<ul>
<li><a href="#org2cde366">Artifacts</a></li>
<li><a href="#org079a8ea">Binaural beat?</a></li>
</ul>
</li>
<li><a href="#orgd107e00">Change the base frequency</a>
<ul>
<li><a href="#org54e4d0a">I really need a slider for frequencies in my life.</a>
<ul>
<li><a href="#org3a54427">nice dev experience, scittle really</a></li>
<li><a href="#org9981462">code:</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org5f9f211">Notes</a>
<ul>
<li><a href="#orgf8daba4">Images</a></li>
<li><a href="#org6c410c6">Update 1</a></li>
<li><a href="#org8c9c208">Update 2</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-orga690e45" class="outline-2">
<h2 id="orga690e45">Introduction</h2>
<div class="outline-text-2" id="text-orga690e45">
<p>
The best thing about being a rationalist is figuring out you are wrong
about something.
</p>

<p>
I was thinking that <code>binaural beats</code> belong together with astral travel,
frankly, just down the toilet.
Turns out that not only was I wrong, but binaural beats also have cool
neuroscience and pose a fun engineering problem on top of that!
</p>

<p>
<a href="https://benjamin-asdf.github.io/just-40hz-binaural-beats/">Here</a> is the current result of my journeys up on gh-pages.
</p>
</div>

<div id="outline-container-org1eeedbf" class="outline-3">
<h3 id="org1eeedbf">What are binaural beats?</h3>
<div class="outline-text-3" id="text-org1eeedbf">
<p>
<a href="https://simple.wikipedia.org/wiki/Binaural_beats">Wikipedia</a>
</p>

<blockquote>
<p>
A binaural beat is an auditory illusion
</p>
</blockquote>

<blockquote>
<p>
For example, if a 530 Hz pure tone is presented to a subject's right ear, while a 520 Hz pure tone is presented to the subject's left ear, the listener will perceive the illusion of a third tone. The third sound is called a binaural beat, and in this example would have a perceived pitch correlating to a frequency of 10 Hz, that being the difference between the 530 Hz and 520 Hz pure tones presented to each ear.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orgeaaa586" class="outline-3">
<h3 id="orgeaaa586">Science</h3>
<div class="outline-text-3" id="text-orgeaaa586">
<p>
There has developed a <a href="https://pubmed.ncbi.nlm.nih.gov/30073406/">growing science</a> about improvements in memory and
attention tasks when listening to binaural beats.
</p>

<p>
BTW the frequency and the time of the exposure matter (i.e. before and during the task is best).
</p>

<p>
Oh yes, I certainly want more of that memory and attention.
</p>


<div id="org48e8bac" class="figure">
<p><img src="https://i.imgur.com/eHaaoYF.png" alt="eHaaoYF.png" />
</p>
<p><span class="figure-number">Figure 1: </span>A brain with headphones flying at the speed of light through space. Lightning on the brain. There is a sine wave in the background. Stylized, Colorful, Cinematic, Digital Art.</p>
</div>
</div>
</div>


<div id="outline-container-org852c28a" class="outline-3">
<h3 id="org852c28a">Frequency</h3>
<div class="outline-text-3" id="text-org852c28a">
<p>
Theta waves (5Hz) <a href="https://pubmed.ncbi.nlm.nih.gov/29222722/">actually decrease memory task performance</a>. So I
really do not want to listen to those.
I heard <a href="https://hubermanlab.com/the-science-of-hearing-balance-and-accelerated-learning/">Andrew Huberman</a> saying that <b>40Hz</b> is the most powerful.
</p>

<p>
If you know about <a href="https://en.wikipedia.org/wiki/Neural_oscillation">brain waves</a>, you might remember 40Hz as the
legendarily intriguing gamma wave.
</p>

<p>
From <a href="https://en.wikipedia.org/wiki/Gamma_wave">wikipedia article</a>:
</p>

<blockquote>
<p>
Gamma rhythms are correlated with large scale brain network activity and cognitive phenomena such as working memory, attention, and perceptual grouping, and can be increased in amplitude via meditation or neurostimulation.
</p>
</blockquote>

<p>
We are really talking about cool stuff here, attention, working
memory, and memory processes. Also, the <a href="https://en.wikipedia.org/wiki/Binding_problem">Binding problem</a>.
</p>
</div>
</div>

<div id="outline-container-org9b28b1a" class="outline-3">
<h3 id="org9b28b1a">The neuroscience of the <a href="https://en.wikipedia.org/wiki/Hearing">auditory system </a></h3>
<div class="outline-text-3" id="text-org9b28b1a">
<p>
Hearing is cool because the neuronal neural information first goes into the brainstem
and then goes up some nuclei up to the thalamus. And eventually to the
temporal lobes of the cortex (the 2 arm things on the side of the brain).
</p>

<p>
This is different from the vision system where the info goes directly to the thalamus.
</p>

<p>
Quoting this <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7082494/">paper</a>:
</p>

<blockquote>
<p>
Presenting two tones with a slight frequency mismatch to each ear separately creates a perception of a third tone, a binaural beat, that oscillates at the absolute difference between the tones (Oster, 1973; Moore, 2012). These beats are thought to originate subcortically in the medial nucleus of the superior olivary complex, the first nucleus in the auditory pathway to receive bilateral input (Wernick and Starr, 1968; Kuwada et al., 1979). This “illusory” third tone is lateralized between the left and right ear of the listener, making binaural beats useful for spatial sound research (Ross et al., 2014).
</p>
</blockquote>

<p>
from the Wikipedia articles on <a href="https://en.wikipedia.org/wiki/Sound_localization">Sound localization</a>
</p>

<blockquote>
<p>
The auditory system uses several cues for sound source localization, including time difference and level difference (or intensity difference) between the ears, and spectral information.
</p>
</blockquote>

<p>
and <a href="https://en.wikipedia.org/wiki/Superior_olivary_complex">Superior olivary complex</a>
</p>

<blockquote>
<p>
The superior olivary nucleus plays a number of roles in hearing. The medial superior olive (MSO) is a specialized nucleus that is believed to measure the time difference of arrival of sounds between the ears (the interaural time difference or ITD). The ITD is a major cue for determining the azimuth of sounds, i.e., localizing them on the azimuthal plane – their degree to the left or the right.
</p>
</blockquote>

<p>
So there is sort of a clump of neurons in the brainstem that are specialized to integrate the timing information between the left and the right ear.
I'm guessing those then start firing in the 40Hz frequency and that is interpreted as a third sound higher up.
</p>
</div>
</div>

<div id="outline-container-org66a5185" class="outline-3">
<h3 id="org66a5185">I think this is ultra cool</h3>
<div class="outline-text-3" id="text-org66a5185">
<p>
You throw some energy at the brain in the right form (in this case
some sound waves) and it reacts in some special way.
If you put it like that, it is not surprising that some things
eventually, end up doing <b>something</b>.
</p>

<p>
Now that the phenomenon has a name we can talk about it, similar to <a href="https://en.wikipedia.org/wiki/ASMR">ASMR</a>.
</p>

<p>
Thinking about how this was always part of how the brain works.
Makes me wonder if some music composers and performers implicitly hit on this earlier, or not.
I tried searching the web for
</p>

<blockquote>
<p>
binaural beats in music
</p>
</blockquote>

<p>
but I really get the same results mix as when I search for <code>binaural beats</code>.
</p>
</div>
</div>


<div id="outline-container-org7047bf0" class="outline-3">
<h3 id="org7047bf0">Give me those binaural beats</h3>
<div class="outline-text-3" id="text-org7047bf0">
<p>
I dint feel like opening a youtube video just to listen to some
sounds. As an aspiring hacker and engineer, I just want to make my
computer make some sounds that I want to listen to.
So I decided to make a simple website that just makes binaural beats and nothing else.
</p>
</div>

<div id="outline-container-orgbbac144" class="outline-4">
<h4 id="orgbbac144">The problem statement:</h4>
<div class="outline-text-4" id="text-orgbbac144">
<p>
Make a sound on 1 ear (e.g. left headphone speaker)
</p>

<p>
Make a second sound on the other ear, with a +40Hz frequency.
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-orgaa4bd1a" class="outline-2">
<h2 id="orgaa4bd1a">scittle</h2>
<div class="outline-text-2" id="text-orgaa4bd1a">
<p>
I set up a beautiful hello world <a href="https://github.com/babashka/scittle/tree/main/doc/nrepl">and connect with nrepl</a>
and get greeted with a friendly <code>Isn't cool? this :)</code>.
</p>

<p>
It took me a moment to figure out I should open my index.html with a browser.
Then do the <code>cider-connect-cljs</code>
</p>
</div>

<div id="outline-container-orgd4b01fb" class="outline-3">
<h3 id="orgd4b01fb">1 ear, 1 sound</h3>
<div class="outline-text-3" id="text-orgd4b01fb">
<p>
First I think let's start making a sound in 1 ear.
</p>

<p>
I am thinking a frequency that I can hear would be nice
so I search the web for <a href="https://en.wikipedia.org/wiki/Hearing_range">human auditory frequencies</a>
</p>

<p>
1 kHz sounds like a good first thing to try.
I am figuring something inside the speech area should sound natural
(turned out that was a naive assumption).
</p>
</div>

<div id="outline-container-org561df15" class="outline-4">
<h4 id="org561df15">The first playground</h4>
<div class="outline-text-4" id="text-org561df15">
<p>
I have a file called playground.clj
(Later I figured out I should rename to .cljs :) ).
</p>

<p>
Now getting heavily inspired by <a href="https://github.com/Cortexelus/Polyphonic-Binaural-Beats">this code</a>.
Going 1 form by 1 like a usual lisp interaction dev experience, lulling it up:
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(def ctx (js/window.AudioContext.))
(def ctx js/window.webkitAudioContext)

(def panner (ctx.createStereoPanner))
(set! (.. panner -pan -value) -1)
(.. panner (connect ctx.destination))

(def oscillators (atom []))
(let [o (ctx.createOscillator)
      _ (set! (.- o type) "sine")
      _ (set! (.. o -frequency -value) 1000)]
  (. o start)
  (. o (connect panner))
  (swap! oscillators conj o))
</pre>
</div>

<p>
I connect my headphones via Bluetooth (a small feat on Linux, maybe
another blog post), and lo and behold I hear a tone in my left ear.
It is a really obnoxious sound, after a few seconds, it is so painful
that I move the headphone to the side.
</p>
</div>
</div>
</div>

<div id="outline-container-orgfa0b0cb" class="outline-3">
<h3 id="orgfa0b0cb">Playing Hz, first round</h3>
<div class="outline-text-3" id="text-orgfa0b0cb">
<p>
Here is a more endurable sound:
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(set! (.. (@oscillators 0) -frequency -value) 200)
</pre>
</div>

<p>
Playing around live at the REPL with sound is <b>fun</b>!
</p>

<p>
Now I am thinking, let's pick some music frequency, those are supposed
to be crafted over hundreds of years to be beautiful frequencies, right?
</p>

<p>
Checking out <a href="https://pages.mtu.edu/~suits/notefreq432.html">a website</a>. I pick D#3 / Eb3. Whatever that is.
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(def a-note-freq 152.74)
(set! (.. (@oscillators 0) -frequency -value) a-note-freq)
</pre>
</div>
</div>
</div>
</div>


<div id="outline-container-org1515598" class="outline-2">
<h2 id="org1515598">binaural!</h2>
<div class="outline-text-2" id="text-org1515598">
<p>
Let's do the thing where I add +40Hz and play that on the other ear.
First I start generalizing how I make a panner:
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(defn -&gt;panner [ctx left?]
  (let
      [panner (. ctx createStereoPanner)
       _ (set! (.. panner -pan -value) (if left? -1 1))
       _ (.. panner (connect ctx.destination))]
    panner))
</pre>
</div>

<p>
For some reason running this I get:
</p>

<pre class="example" id="org46ead71">
Failed to execute 'connect' on 'AudioNode': Overload resolution failed.
</pre>

<p>
I went and asked in the nbb clojurians slack. I am sure one day we will figure out
this error, in the meantime&#x2026;
</p>
</div>

<div id="outline-container-org16c265e" class="outline-3">
<h3 id="org16c265e">just put the second sound in the other ear, whatever</h3>
<div class="outline-text-3" id="text-org16c265e">
<div class="org-src-container">
<pre class="src src-Clojure">(ns beats)

(def a-note-freq 152.74)
(def binaural-beat-freq 40)
(def oscillators (atom []))
(defonce ctx (js/window.AudioContext.))

(def panners
  {:left
   (let [left? true]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))
   :right
   (let [left? nil]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))})

(defn oscillate [panner hz]
  (let [o (ctx.createOscillator)
	_ (set! (.- o type) "sine")
	_ (set! (.. o -frequency -value) hz)]
    (. o start)
    (. o (connect panner))
    (swap! oscillators conj o)))

(-&gt; panners :right (oscillate (+ a-note-freq binaural-beat-freq)))
(-&gt; panners :left (oscillate a-note-freq))
</pre>
</div>

<p>
lol, it works.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb27eb2c" class="outline-2">
<h2 id="orgb27eb2c">Intermediate results</h2>
<div class="outline-text-2" id="text-orgb27eb2c">
</div>
<div id="outline-container-org2cde366" class="outline-3">
<h3 id="org2cde366">Artifacts</h3>
<div class="outline-text-3" id="text-org2cde366">
<p>
Every now and then there are artifacts in the sound with my headphones setup.
Some are just rustling and crackling.
</p>

<p>
Others sound like some kind of metal being stretched far, far away, underwater, or in slow motion.
It reminds me a bit of the <a href="https://www.youtube.com/watch?v=O6iHgOEp0Fg&amp;t=452s">Dungeon Keeper soundtrack</a>. Dark and eerie,
sort of slow mow.
</p>
</div>
</div>

<div id="outline-container-org079a8ea" class="outline-3">
<h3 id="org079a8ea">Binaural beat?</h3>
<div class="outline-text-3" id="text-org079a8ea">
<p>
Pretty sure I get the third-tone illusion.
I would describe it as some kind of background or in between "airy"
sound.
It is supposed to seem to come from the middle of the brain.
It is as if the fabric of the sound is richer. Like there is sound in more places.
</p>
</div>
</div>
</div>

<div id="outline-container-orgd107e00" class="outline-2">
<h2 id="orgd107e00">Change the base frequency</h2>
<div class="outline-text-2" id="text-orgd107e00">
<p>
It occurred to me, that if I get the 40Hz sound illusion, then I would
predict that I can change the base frequency, keeping the 40Hz difference between
left and right ear invariant. I should then constantly perceive a 3rd tone which is the binaural beat.
</p>
</div>

<div id="outline-container-org54e4d0a" class="outline-3">
<h3 id="org54e4d0a">I really need a slider for frequencies in my life.</h3>
<div class="outline-text-3" id="text-org54e4d0a">
<p>
I did not do much web dev in my life and making a slider was a first.
</p>

<p>
I managed to put something together, drawing inspiration from
<a href="https://www.w3schools.com/howto/howto_js_rangeslider.asp">w3 schools</a> for the Html, <a href="https://babashka.org/scittle/">scittle</a> for how to export, and <a href="https://stackoverflow.com/questions/13896685/html5-slider-with-onchange-function">stackoverflow</a> for how to add a function to "onchange".
</p>
</div>

<div id="outline-container-org3a54427" class="outline-4">
<h4 id="org3a54427">nice dev experience, scittle really</h4>
<div class="outline-text-4" id="text-org3a54427">
<ol class="org-ol">
<li>I did not need to restart my REPL at any point, adding those Html
elements, then reloading my index.html - it handles that.</li>
<li><p>
I get auto completions with cider. E.g. <code>js/..</code> does something.
</p>

<div class="org-center">
<p>
BTW here is a tip, for <code>sci</code> projects (<code>babashka</code>, <code>nbb</code>, <code>scittle</code>).
Currently, you need to evaluate a namespace form first.
Then you can get completions.
At least with cider.
</p>
</div></li>
</ol>



<div id="org6a25c42" class="figure">
<p><img src="https://i.imgur.com/M8rSuZ3.png" alt="M8rSuZ3.png" />
</p>
<p><span class="figure-number">Figure 2: </span>A mouse with headphones typing on a laptop. Intelligent. Sparks of magic are flying around. There is lightning on the mouse and laptop. Computer programming source code. Colorful, playful.</p>
</div>

<p>
The word <code>scittle</code> makes me think of a small mammal in the habitus of
a mouse.
I imagine it scurrying and curiously sniffing around.
</p>
</div>
</div>

<div id="outline-container-org9981462" class="outline-4">
<h4 id="org9981462">code:</h4>
<div class="outline-text-4" id="text-org9981462">
<p>
index.html
</p>
<div class="org-src-container">
<pre class="src src-Html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script&gt;var SCITTLE_NREPL_WEBSOCKET_PORT = 1340;&lt;/script&gt;
    &lt;script src="https://cdn.jsdelivr.net/npm/scittle@0.3.10/dist/scittle.js" type="application/javascript"&gt;&lt;/script&gt;
    &lt;script src="https://cdn.jsdelivr.net/npm/scittle@0.3.10/dist/scittle.nrepl.js" type="application/javascript"&gt;&lt;/script&gt;
    &lt;script type="application/x-scittle" src="beats.cljs"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="slidecontainer"&gt;
      &lt;input type="range" min="120000" max="250000" value="15274"
      class="slider" id="frequencyRange" onchange="update_app(this.value)"&gt; &lt;/div&gt;
    &lt;div id="frequencyDisplay"&gt; &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
</div>

<p>
beats.cljs
</p>
<div class="org-src-container">
<pre class="src src-clojure">(ns beats)

(def binaural-beat-freq 40)
(defonce ctx (js/window.AudioContext.))
(def slider (js/document.getElementById "frequencyRange"))
(def display (js/document.getElementById "frequencyDisplay"))

(def panners
  {:left
   (let [left? true]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))
   :right
   (let [left? nil]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))})

(defn update-display! [value]
  (set! (.-innerHTML display)
	(str "Base frequency: " value)))

(def get-oscillator
  (memoize
   (fn [panner]
     (let [o (ctx.createOscillator)]
       (set! (.- o type) "sine")
       (. o start)
       (. o (connect panner))
       o))))

(defn oscillate [panner hz]
  (let [o (get-oscillator panner)
	_ (set! (.. o -frequency -value) hz)])
  hz)

(defn update-app [frequency-value]
  (let [frequency-value (/ frequency-value 1000.0)]
    (-&gt; panners :right (oscillate (+ frequency-value binaural-beat-freq)))
    (-&gt; panners :left (oscillate frequency-value))
    (update-display! frequency-value)))

(set! (.-update_app js/window) update-app)

(update-app (* 1000 152.74))
</pre>
</div>

<p>
The fact that I export my function by setting this global <code>window</code> object is quite wild.
And then how I write a string of js code in the 'onchange' of the
Html - damn.
As I said, I am new to the web. Now I know one reason why it is called the wild west.
But it let me "just do" what I wanted without being in my way so I
appreciate that.
</p>

<p>
On the scittle side, I updated the code to only get 1 oscillator per slider. Seems like stuff is working.
Switching up the frequencies via the slider is satisfying.
For some reason, those artifacts are also gone. Maybe sliders just ensure balance and harmony in the world?
</p>

<p>
I am pretty sure I can tell there is 1 sound that seems to stay the same across frequencies.
</p>

<p>
I do the float <code>* 1000</code> trick because I want to work with 2 digits for my frequencies.
</p>

<p>
Btw I also quickly tried what a <b>real</b> 40Hz tone sounds like. Ultra-low. I almost feel like I can make out the single waves, maybe that
are the headphones cracking?
Not surprising as the lower bound of human hearing is 20hz.
The sound of the highest achievement of human thought.
Genius insights, ideas that come to you like lightning. Globally
integrating patterns of the brain and mind.
</p>


<div id="org29ba203" class="figure">
<p><img src="https://i.imgur.com/xijojsT.png" alt="xijojsT.png" />
</p>
<p><span class="figure-number">Figure 3: </span>Harry potter wearing headphones having spiritual enlightenment about magic. Glowing magic sparks fly around. Colorful, cinematic, video game concept art.</p>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-org5f9f211" class="outline-2">
<h2 id="org5f9f211">Notes</h2>
<div class="outline-text-2" id="text-org5f9f211">
</div>
<div id="outline-container-orgf8daba4" class="outline-3">
<h3 id="orgf8daba4">Images</h3>
<div class="outline-text-3" id="text-orgf8daba4">
<p>
Made with <a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">stable-diffusion</a>.
The captions are the prompts I used.
</p>
</div>
</div>

<div id="outline-container-org6c410c6" class="outline-3">
<h3 id="org6c410c6">Update 1</h3>
<div class="outline-text-3" id="text-org6c410c6">
<p>
Currently does not work on mobile. Seems like I have the
opportunity for another web dev feat, then.
Seems like the issue is isolated on the sound appearing because the
slider value works fine (meaning that the scittle code is running fine).
</p>
</div>
</div>

<div id="outline-container-org8c9c208" class="outline-3">
<h3 id="org8c9c208">Update 2</h3>
<div class="outline-text-3" id="text-org8c9c208">
<p>
Now it also works on mobile!
Somebody helpfully pointed out on slack that on mac there was an error
about audio refusing to play before the first touch event.
I fixed that by adding a <code>play</code> button.
But mobile still did not work, ok.
After checking <a href="https://stackoverflow.com/questions/46345883/why-audio-not-playing-on-mobile-browser">stackoverflow</a> I still sort of have the idea that it has
to do with user interaction events and this <code>AudioContext</code>.
I first wanted to delay the whole audio setup until you click the
button.
But <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext">read</a> that you should make a single <code>AudioContext</code> at the beginning.
</p>

<p>
So I try to delay the 1 other thing in the code:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(def panners
 (delay {:left (-&gt;panner true) :right (-&gt;panner false)}))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-clojure">(-&gt; @panners :right (oscillate (+ frequency-value binaural-beat-freq)))
(-&gt; @panners :left (oscillate frequency-value))
</pre>
</div>


<p>
It works, haha!
</p>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-19 Mon 11:04</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/dreaming-code.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/dreaming-code.html"/>
    <title>dreaming-code</title>
    <updated>2022-10-20T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>dreaming-code</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">dreaming-code</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org3f0f756">Sleep mentations</a></li>
<li><a href="#org7fa6188">The night goes on - REM, NREM</a></li>
<li><a href="#orgee4aa74">Source code in a vivid dream</a></li>
</ul>
</div>
</div>
<p>
I produced source code in a dream once.
</p>

<p>
When I dream of coding it is <i>usually</i> sort of "disembodied" just
concepts and problems + in the earlier part of the night.
</p>

<p>
What is the business of these early-night dreams?
</p>

<div id="outline-container-org3f0f756" class="outline-2">
<h2 id="org3f0f756">Sleep mentations</h2>
<div class="outline-text-2" id="text-org3f0f756">
<blockquote>
<p>
NREM dreams are typically shorter, more fragmented, and more thought-like whereas REM dreams are longer, more emotional, and more bizarre
</p>
</blockquote>
<p>
(<a href="https://www.researchgate.net/publication/320356182_Dream_Recall_and_Content_in_Different_Stages_of_Sleep_and_Time-of-Night_Effect">Carr and Solomonova 2019</a>).
</p>

<p>
These <i>dreams</i> from the early part of the night are more like
thinking with some dream logic.
</p>

<p>
Here is an example from my dream diaries:
</p>

<blockquote>
<p>
I have an internet connection in my brain and I need to connect to a
database, then send some data to my feet.
It is like thinking about the problem itself more, with some
disembodied visuals of code.
The coding itself is a little like being able to modify code
blocks by raising an eyebrow or a finger.
Every time I wake up I sort of want to "go back" to the problem, because
I "know",  I have almost solved it. Always so close.
</p>
</blockquote>

<p>
Another quote from Carr and Solomonova:
</p>

<blockquote>
<p>
Some use a more inclusive dreaming definition, such as ‘sleep mentation’, which is characterized by any cognitive activity, whereas the  original concept of dreaming was more qualified as  hallucinatory, predominantly visual, imagery (see also chapter 5). The questions used by an experimenter can alter a participant’s interpretation of dreaming.  For example, the question, “what was going through your mind just before I called you”, will encourage more frequent dream reports than, “what were you dreaming about?”
</p>
</blockquote>

<p>
I like the idea of calling these <i>sleep mentation</i> instead of dreams.
</p>
</div>
</div>

<div id="outline-container-org7fa6188" class="outline-2">
<h2 id="org7fa6188">The night goes on - REM, NREM</h2>
<div class="outline-text-2" id="text-org7fa6188">
<blockquote>
<p>
Attributes such as length, bizarreness, and perceptual vividness increase for both NREM and REM sleep reports across the night
</p>
</blockquote>
<p>
(<a href="https://www.researchgate.net/publication/320356182_Dream_Recall_and_Content_in_Different_Stages_of_Sleep_and_Time-of-Night_Effect">Carr and Solomonova 2019</a>).
</p>

<p>
Additionally, it is well known that in the later part of the night you have more <a href="https://en.wikipedia.org/wiki/Rapid_eye_movement_sleep">REM sleep</a>.
</p>

<p>
I was grouping dreams into 2 categories on a continuum:
</p>

<ol class="org-ol">
<li>"Episodic" dreams, a reference to <a href="https://en.wikipedia.org/wiki/Episodic_memory">episodic memory</a>.
Featuring persons, places, <b><b>situations</b></b> with a story.
In many cases featuring a main character.
Later in the night.</li>
<li>"Non-Episodic" dreams: Usually no characters, no real story. More
like thinking about a problem. Or tool/toy/concept usage in
the abstract somehow. As if the brain parts for the tool usage are
online without any of the storytelling, and little of the "world integrating"
parts.
More abstract, fewer visuals and perceptions (low "vividness").
Also, <b>extremely hard</b> to remember any content.
Also, it is very hard (impossible?) to become lucid during one of those.
Earlier in the night.</li>
</ol>
</div>
</div>

<div id="outline-container-orgee4aa74" class="outline-2">
<h2 id="orgee4aa74">Source code in a vivid dream</h2>
<div class="outline-text-2" id="text-orgee4aa74">
<p>
It <b>did</b> happen to me recently halfway through the night.
A dream purely about coding but more on the side of what I would call
<i>episodic</i>.
This was a complete first time. Usually, code dreams where these
ephemeral problem-solve dreams.
</p>

<p>
I was dreaming about my emacs config.
</p>

<p>
I recall a visual of colored source code (+ content!).
There was also a bit of a first-person main character, thinking along
the lines of "I want to make this part smoother&#x2026;".
Here it is:
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="font-weight: bold; font-style: italic;">;; </span><span style="font-weight: bold; font-style: italic;">This code came to me in a dream almost verbatim:</span>
(add-hook 'kill-emacs-hook #'save-some-buffers)
</pre>
</div>

<p>
I was able to type in this code the next morning, haha!
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-10-20 Thu 19:18</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/scratching-in-space.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/scratching-in-space.html"/>
    <title>scratching-in-space</title>
    <updated>2022-10-04T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>scratching-in-space</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">scratching-in-space</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga504ab7">Introduction</a></li>
<li><a href="#orgba3693a">scratching in space</a>
<ul>
<li><a href="#org08f7dd3">here is my current hack for this:</a></li>
</ul>
</li>
<li><a href="#org8260cb8">clojure scratch repl?</a></li>
<li><a href="#org8ebb362">Further reading</a></li>
<li><a href="#orgffba0c0">inspiring talks</a></li>
</ul>
</div>
</div>
<p>
Emacs scratch buffers have place oriented design.
</p>

<p>
A simple alternative: make files.
</p>

<p>
Musings about persistent scratch technology.
</p>

<div id="outline-container-orga504ab7" class="outline-2">
<h2 id="orga504ab7">Introduction</h2>
<div class="outline-text-2" id="text-orga504ab7">
<p>
If you ever typed something in a buffer called <code>*scratch*</code> you will
inevitably have found yourself in this situation:
</p>

<ol class="org-ol">
<li>Just typed some awesome code.</li>
<li>Kill scratch buffer accidentally or unthinkingly.</li>
<li>That awesome text is gone forever&#x2026; and it hurts.</li>
</ol>

<p>
I did try <a href="https://github.com/Fanael/persistent-scratch">persistent-scratch</a>, in its simplest form, it persists your
scratch buffer across sessions.
You still end up having one place for your "current" scratch.
It just did not click with me.
</p>

<p>
The whole idea of a scratch buffer might be obsolete (<a href="http://xahlee.info/emacs/emacs/modernization_scratch_buffer.html">Xah Lee 2008</a>).
</p>

<p>
What I want:
</p>

<ol class="org-ol">
<li>Convenient way of writing some code interactively.</li>
<li>Persist it.</li>
</ol>
</div>
</div>

<div id="outline-container-orgba3693a" class="outline-2">
<h2 id="orgba3693a">scratching in space</h2>
<div class="outline-text-2" id="text-orgba3693a">
<p>
Our disk space is vast, and emacs is great at creating files.
</p>

<p>
We can be like Sherlock Holmes and never throw our notes away.
</p>

<p>
Horde those scratches. Put them in git.
Now you can grep through them, see what you were scratching years in the past.
</p>

<p>
I have a dir called <code>~/scratches</code> with all my scratches.
This is a bit similar to <a href="https://start.duckduckgo.com/">denote</a>, which I use for note-taking.
</p>
</div>

<div id="outline-container-org08f7dd3" class="outline-3">
<h3 id="org08f7dd3">here is my current hack for this:</h3>
<div class="outline-text-3" id="text-org08f7dd3">
<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defvar</span> <span style="font-weight: bold; font-style: italic;">mememacs/scratch-dir</span> (expand-file-name <span style="font-style: italic;">"~/scratch"</span>))
(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mememacs/latest-scratch</span> (suffix)
  (<span style="font-weight: bold;">unless</span> (file-exists-p mememacs/scratch-dir)
    (make-directory mememacs/scratch-dir))
  (<span style="font-weight: bold;">when-let</span>
      ((f
        (car
         (cl-remove-if-not
          (<span style="font-weight: bold;">lambda</span> (it)
            (<span style="font-weight: bold;">and</span> (string-suffix-p suffix it)
                 (not (string-match-p <span style="font-style: italic;">"#"</span> it))))
          (process-lines
           <span style="font-style: italic;">"ls"</span>
           <span style="font-style: italic;">"-A"</span>
           <span style="font-style: italic;">"-t"</span>
           mememacs/scratch-dir)))))
    (expand-file-name f mememacs/scratch-dir)))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mememacs/new-scratch-name</span> (suffix)
  (<span style="font-weight: bold;">unless</span> (file-exists-p
           mememacs/scratch-dir)
    (make-directory
     mememacs/scratch-dir))
  (expand-file-name
   (format <span style="font-style: italic;">"%s.%s"</span> (make-temp-name <span style="font-style: italic;">"scratch-"</span>) suffix)
   mememacs/scratch-dir))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/scratch</span>
    (<span style="font-weight: bold; text-decoration: underline;">&amp;optional</span> create-new suffix)
  <span style="font-style: italic;">"Visit the latest scratch file with `suffix` (a file extension).</span>
<span style="font-style: italic;">With prefix arg make a new file."</span>
  (<span style="font-weight: bold;">interactive</span>
   (list current-prefix-arg
         (completing-read <span style="font-style: italic;">"scratch filetype: "</span> '(<span style="font-style: italic;">"cljs"</span> <span style="font-style: italic;">"clj"</span>))))
  (<span style="font-weight: bold;">let*</span> ((latest (mememacs/latest-scratch suffix))
         (buff
          (find-file-noselect
           (<span style="font-weight: bold;">if</span> (<span style="font-weight: bold;">or</span> create-new (not latest))
               (mememacs/new-scratch-name suffix)
             latest))))
    (pop-to-buffer-same-window buff)
    (<span style="font-weight: bold;">when</span> (eq major-mode 'emacs-lisp-mode)
      (elisp-enable-lexical-binding))
    buff))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/scratch-el</span> (<span style="font-weight: bold; text-decoration: underline;">&amp;optional</span> arg)
  (<span style="font-weight: bold;">interactive</span> <span style="font-style: italic;">"P"</span>)
  (mm/scratch arg <span style="font-style: italic;">"el"</span>))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-elisp">keybinds:
leader bs #'mm/scratch-el
leader bS #'mm/scratch
</pre>
</div>

<p>
With a nice keybind (<code>leader b s</code>) I go to my current scratch file - the latest modified file in my scratch dir.
With prefix-arg, it makes a new file.
A second bind will ask me to make a <code>clj</code> or <code>cljs</code> file.
</p>
</div>
</div>
</div>

<div id="outline-container-org8260cb8" class="outline-2">
<h2 id="org8260cb8">clojure scratch repl?</h2>
<div class="outline-text-2" id="text-org8260cb8">
<p>
Whatever. I just do this:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">echo</span> <span style="font-style: italic;">'{}'</span> &gt; ~/scratch/bb.edn
</pre>
</div>

<p>
Now I can start a cider repl with bb in my scratch dir.
If you want to be asked for <code>bb</code> or <code>jvm</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">echo</span> <span style="font-style: italic;">'{}'</span> &gt; ~/scratch/deps.edn
</pre>
</div>

<p>
Also <code>nbb</code>: A nice way to scratch some cljs + javascript + node:
It currently requires some workaround that you can find <a href="jacking-nbb.html">here</a>.
</p>
</div>
</div>

<div id="outline-container-org8ebb362" class="outline-2">
<h2 id="org8ebb362">Further reading</h2>
<div class="outline-text-2" id="text-org8ebb362">
<ul class="org-ul">
<li><a href="backing-you-up.html">backups in space</a></li>
<li><a href="https://old.reddit.com/r/emacs/comments/6zgt0c/persistent_scratch_buffer/">reddit persistent scratch discussion</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgffba0c0" class="outline-2">
<h2 id="orgffba0c0">inspiring talks</h2>
<div class="outline-text-2" id="text-orgffba0c0">
<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=-6BsiVyC1kM">The value of values (place-oriented programming is obsolete)</a></li>
<li><a href="https://www.youtube.com/watch?v=OUZZKtypink">Program like Sherlock Holmes</a></li>
</ul>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-10-04 Tue 16:04</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/jacking-nbb.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/jacking-nbb.html"/>
    <title>jacking-nbb</title>
    <updated>2022-10-14T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>jacking-nbb</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" href="navbar.css" />
</head>
<body>
<div id="preamble" class="status">
  <h4>
    <a href="https://benjamin-asdf.github.io/faster-than-light-memes/"
       style="background-color:black;;text-decoration:none;padding:0.3rem">
      <span style="color:#feb48f">:faster-than-light</span>
      <span style="color:#F689FF">/memes</span>
    </a>
  </h4>
<ul id="navbar">
    <li><a href="binaural-beats-using-scittle.html">Binaural Beats with Scittle</a></li>
<li><a href="bashing-is-better-than-extending.html">Bashing is better than extending</a></li>
<li><a href="dir-env-process-environment.html">Dir env for process-environment</a></li>
<li><a href="scittle-prints-itself.html">Scittle prints itself</a></li>
<li><a href="intro-to-clojure.html">Intro to Clojure</a></li>
<li><a href="scratching-in-space.html">Scratching in space</a></li>
<li><a href="jacking-nbb.html">Jacking in nbb</a></li>
<li><a href="backing-you-up.html">Backing you up</a></li>
<li><a href="anonymous-commands-in-emacs.html">Anonymous lambdas in emacs binds</a></li>
<li><a href="dreaming-code.html">Dreaming code</a></li>
<li><a href="pearls-of-introspection.html">Pearls of Introspection</a></li>
<li><a href="not-even-the-sky-is-the-limit.html">Not even the Sky is the limit</a></li>
<li><a href="aws-iam-and-cloudwatch-logs-start-query.html">Cloudwatch Logs Query Iam Example</a></li>
<li><a href="the-deeper-chat-gpt.html">The Deeper Chat-Gpt</a></li>

</ul>
</div>
<div id="content" class="content">
<h1 class="title">jacking-nbb</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc486f76">Introduction</a></li>
<li><a href="#orgab953a5">Jack-in command</a>
<ul>
<li><a href="#org33efb61">cider repl workaround</a></li>
<li><a href="#org29bb7fd">the command</a></li>
<li><a href="#org3726eb7">hack for the remaining issue</a></li>
</ul>
</li>
<li><a href="#org15fdc7e">Results</a></li>
</ul>
</div>
</div>
<p>
A cider jack in command for nbb.
</p>
<div id="outline-container-orgc486f76" class="outline-2">
<h2 id="orgc486f76">Introduction</h2>
<div class="outline-text-2" id="text-orgc486f76">
<p>
<a href="https://github.com/babashka/nbb">Nbb</a> is a beatiful <a href="https://www.youtube.com/watch?v=tX4wg4wOFuU">parasite</a>.
A node script that is an interpreter for Clojurescript.
You get the upsides of Node.js + it is Clojure.
</p>

<p>
Want to try out some npm packages?
Sure, just make a <code>package.json</code>, works instant, is part of the design
principles of nbb.
</p>

<p>
You get Clojures immutable data structures, polymorphism constructs, a
repl, etc.
</p>

<p>
On the tooling side, you might be surprised how far nbb gets with very little.
</p>

<p>
Scratching (<a href="scratching-in-space.html">in space</a>) is very usefull and nbb is a natural fit for a quick cljs repl.
</p>
</div>
</div>

<div id="outline-container-orgab953a5" class="outline-2">
<h2 id="orgab953a5">Jack-in command</h2>
<div class="outline-text-2" id="text-orgab953a5">
</div>
<div id="outline-container-org33efb61" class="outline-3">
<h3 id="org33efb61">cider repl workaround</h3>
<div class="outline-text-3" id="text-org33efb61">
<p>
We currently need this workaround for sci-based cljs repls for cider:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(cider-register-cljs-repl-type 'nbb-or-scittle-or-joyride <span style="font-style: italic;">"(+ 1 2 3)"</span>)

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/cider-connected-hook</span> ()
  (<span style="font-weight: bold;">when</span> (eq 'nbb-or-scittle-or-joyride cider-cljs-repl-type)
    (<span style="font-weight: bold;">setq-local</span> cider-show-error-buffer nil)
    (cider-set-repl-type 'cljs)))

(add-hook 'cider-connected-hook #'mm/cider-connected-hook)
</pre>
</div>
</div>
</div>

<div id="outline-container-org29bb7fd" class="outline-3">
<h3 id="org29bb7fd">the command</h3>
<div class="outline-text-3" id="text-org29bb7fd">
<p>
Unfortunately, cider does not have the concept of a nbb repl currently.
I think <code>cider-jack-in-resolve-command</code> and similar functions could be
thrown out and replaced with data.
</p>

<p>
So I went 1 level deeper to bypass ciders auto-detection of
project type (+ jack in cmd):
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/cider-jack-in-nbb</span> ()
  <span style="font-style: italic;">"Start a nbb nrepl process and connect."</span>
  (<span style="font-weight: bold;">interactive</span>)
  (<span style="font-weight: bold;">let*</span> ((cider-allow-jack-in-without-project t)
         (orig-buffer (current-buffer))
         (params '(<span style="font-weight: bold;">:jack-in-cmd</span> <span style="font-style: italic;">"nbb nrepl-server :port 0"</span>
                   <span style="font-weight: bold;">:cljs-repl-type</span> nbb-or-scittle-or-joyride))
         (params (cider--update-project-dir
                  params)))
    (nrepl-start-server-process
     (plist-get params <span style="font-weight: bold;">:project-dir</span>)
     (plist-get params <span style="font-weight: bold;">:jack-in-cmd</span>)
     (<span style="font-weight: bold;">lambda</span> (server-buffer)
       (<span style="font-weight: bold;">with-current-buffer</span>
           orig-buffer
         (cider-connect-sibling-cljs
          params
          server-buffer))))))
</pre>
</div>

<p>
This is what I wanted to say:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/cider-jack-in-nbb</span> ()
  <span style="font-style: italic;">"Start an nbb nrepl process and connect."</span>
  (<span style="font-weight: bold;">interactive</span>)
  (cider-jack-in-cljs
   '(<span style="font-weight: bold;">:jack-in-cmd</span> <span style="font-style: italic;">"nbb nrepl-server :port 0"</span>
     <span style="font-weight: bold;">:cljs-repl-type</span> nbb-or-scittle-or-joyride)))
</pre>
</div>
</div>
</div>

<div id="outline-container-org3726eb7" class="outline-3">
<h3 id="org3726eb7">hack for the remaining issue</h3>
<div class="outline-text-3" id="text-org3726eb7">
<p>
With this, you should get an error "ClojureScript is not available&#x2026;".
<a href="https://github.com/clojure-emacs/cider/issues/3255">Until there is a fix in cider</a>, you can hack it by redefining <code>cider-verify-clojurescript-is-present</code>:
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="font-weight: bold; font-style: italic;">;;; </span><span style="font-weight: bold; font-style: italic;">FIXME: https://github.com/clojure-emacs/cider/issues/3255</span>
(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">cider-verify-clojurescript-is-present</span> ()
  <span style="font-style: italic;">"Check whether ClojureScript is present."</span>
  (<span style="font-weight: bold;">unless</span> (nrepl-dict-get (cider-sync-tooling-eval <span style="font-style: italic;">"cljs.core/inc"</span>) <span style="font-style: italic;">"value"</span>)
    (<span style="font-weight: bold;">user-error</span> <span style="font-style: italic;">"ClojureScript is not available.  See https://docs.cider.mx/cider/basics/clojurescript for details"</span>)))
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org15fdc7e" class="outline-2">
<h2 id="org15fdc7e">Results</h2>
<div class="outline-text-2" id="text-org15fdc7e">
<p>
Hehe, insta nbb repl. Works good.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-10-14 Fri 10:22</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
</feed>
