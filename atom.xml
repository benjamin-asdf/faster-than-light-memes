<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Faster-than-Light memes</title>
  <link href="https://benjamin-asdf.github.io/faster-than-light-memes/atom.xml" rel="self"/>
  <link href="https://benjamin-asdf.github.io/faster-than-light-memes/"/>
  <updated>2022-09-26T18:00:20+00:00</updated>
  <id>https://benjamin-asdf.github.io/faster-than-light-memes/</id>
  <author>
    <name>Benjamin Schwerdtner</name>
  </author>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/scittle-prints-itself.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/scittle-prints-itself.html"/>
    <title>scittle-prints-itself</title>
    <updated>2022-09-26T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>scittle-prints-itself</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
</head>
<body>
<div id="content" class="content">
<h1 class="title">scittle-prints-itself</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1b27e34">Introduction</a></li>
<li><a href="#org7eb2aab">Problem statement</a></li>
<li><a href="#orgb25f526">Some reagent code</a></li>
<li><a href="#org291f6d4">Fetch</a></li>
<li><a href="#orgf6904dd">Pretty print the code..?</a></li>
<li><a href="#org4823c6a">Eval string</a></li>
<li><a href="#org615e24f">Only fetch once</a></li>
<li><a href="#orgdc2c89b">Make a big aquamarine rectangle into a small magenta rectangle</a></li>
<li><a href="#org24bac8f">Codepen</a></li>
</ul>
</div>
</div>

<div id="outline-container-org1b27e34" class="outline-2">
<h2 id="org1b27e34">Introduction</h2>
<div class="outline-text-2" id="text-org1b27e34">
<p>
I was wondering about what is cool for a newcomer to coding.
As a lisper, I think the real joy of programming is interactive programming.
So if I find some way of communicating this magic, that would be great.
</p>

<p>
After my <a href="binaural-beats-using-scittle.html">binaural beats</a> adventure I am sort of hot for trying out
Scittle on something bigger.
So I had this idea of a Scittle website that prints its source code,
then you update the code and get an immediate effect.
</p>

<p>
I wanted this to be <b>my</b> website so maybe a new team member can also
go into the code and hack around.
</p>
</div>
</div>

<div id="outline-container-org7eb2aab" class="outline-2">
<h2 id="org7eb2aab">Problem statement</h2>
<div class="outline-text-2" id="text-org7eb2aab">
<ol class="org-ol">
<li>print your source code</li>
<li>ability to update code</li>
<li>no code editor in the browser (input field&#x2026;)
I am thinking getting this approximately non-clunky would be hard.
Especially balancing the parens.
I decided to go with a drag and drop area where you slurp in a
file into the browser.</li>
<li>(made up constraints) make it a website and use Scitttle</li>
<li>This is not a <a href="https://en.wikipedia.org/wiki/Quine_(computing)">Quine</a> because it receives the source code as input</li>
</ol>
</div>
</div>

<div id="outline-container-orgb25f526" class="outline-2">
<h2 id="orgb25f526">Some reagent code</h2>
<div class="outline-text-2" id="text-orgb25f526">
<p>
I do some StackOverflow-driven development for a drag-and-drop area.
</p>

<p>
I needed to figure out how <a href="https://www.w3schools.com/jsref/event_ondragover.asp">ondragover Event</a> and friends translate with
hiccup.
Luckily the legendary question answerer  <code>@p-himik</code> helped me out in the
<code>#clojurescript</code> slack channel.
Turns out that when I add <code>:on-drag-over</code> in the attribute map it works.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(ns main
  (:require
   [reagent.core :as r]
   [reagent.dom :as rdom]))

(defonce state (r/atom {:code-text ""}))

(defn drop-area []
  [:div#drop-area
   {:style {:margin-top "1rem"
	    :height "10rem"
	    :width "10rem"
	    :background "Aquamarine"}
    :on-drag-enter
    (fn [event]
      (set! (.. (js/document.getElementById "drop-area") -style -background) "cyan"))
    :on-drag-exit
    (fn [event]
      (set! (.. (js/document.getElementById "drop-area") -style -background) "Aquamarine"))
    :on-drag-over
    (fn [event]
      (doto
	  event
	  .stopPropagation
	 .preventDefault)
      (set! (.. event -dataTransfer -dropEffect) "copy"))
    :on-drop (fn [event]
      (doto
	  event
	  .stopPropagation
	  .preventDefault)
      (let [file (-&gt;  (.. event -dataTransfer -files) first)]
	(-&gt;
	 (.text file)
	 (.then
	  (fn [t] (swap! state assoc :code-text t)))))
      (set! (.. (js/document.getElementById "drop-area") -style -background) "Aquamarine"))}
   [:div
    {:style {:margin "1rem"
	     :padding-top "2.5rem"}}
    "drop a file here"]])

(defn code-snippet []
  [:div
   {:style {:background "gainsboro"}}
   (:code-text @state)])

(defn my-component []
  [:div
   [drop-area]
   [code-snippet]])

(rdom/render [my-component] (.getElementById js/document "app"))

(comment
  (swap! state assoc :code-text "foi110"))
</pre>
</div>

<p>
With this, I have a drop area for a file.
</p>

<p>
Wonderful thing:
Updating <code>state</code> redraws the UI for us.
</p>

<p>
Evaluating <code>(swap! state assoc :code-text "foi110")</code> makes <code>reagent</code> 's magic take effect.
</p>
</div>
</div>

<div id="outline-container-org291f6d4" class="outline-2">
<h2 id="org291f6d4">Fetch</h2>
<div class="outline-text-2" id="text-org291f6d4">
<p>
I also want to show the default code on the first load.
After some StackOverflow research, I determine <a href="https://www.w3schools.com/jsref/api_fetch.asp">fetch</a> should work.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(-&gt;
 (js/fetch "main.cljs")
 (.then (fn [x] (.text x)))
 (.then (fn [x] (swap! state assoc :code-text x))))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf6904dd" class="outline-2">
<h2 id="orgf6904dd">Pretty print the code..?</h2>
<div class="outline-text-2" id="text-orgf6904dd">
<p>
At this point my website looks like this:
</p>


<div id="org32d7599" class="figure">
<p><img src="https://i.imgur.com/VU5LqMM.png" alt="VU5LqMM.png" />
</p>
<p><span class="figure-number">Figure 1: </span>Halfway there. Sort of printing the source code now.</p>
</div>

<p>
I want to do something where at least the white space is rendered.
</p>

<p>
After searching the web, I decide I need a <code>&lt;pre&gt;</code> tag to say it is preformatted.
Also <code>&lt;code&gt;</code> sounds great.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(defn code-snippet []
  [:div
   {:style {:background "gainsboro"}}
   [:pre
    [:code
     (:code-text @state)]]])
</pre>
</div>

<p>
Update the function, re-eval the <code>rdom/render</code> form. Boom I instantly look at my updated visuals.
With cider, I can also call <code>cider-eval-buffer</code>, or <code>cider-eval-file</code>.
I first had the background <code>style</code> inside the <code>code</code> tag, which did not have
the look I wanted.
I can hack on a piece of UI in isolation. Directly. Without any mental
suspension time. It is great.
It is how all coding should be.
</p>
</div>
</div>

<div id="outline-container-org4823c6a" class="outline-2">
<h2 id="org4823c6a">Eval string</h2>
<div class="outline-text-2" id="text-org4823c6a">
<p>
Now for the magic of updating the website with whatever you upload.
First, I ask Borkdude on slack how to evaluate a string.
-&gt; You use <code>load-string</code>.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(load-string
 (prn-str '(js/console.log "hello")))
</pre>
</div>

<p>
Says <code>hello</code> in the console.
</p>

<p>
I update my file drop handler with the side effect of loading the text:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(fn [t]
 (load-string l)
 (swap! state assoc :code-text t))
</pre>
</div>
<p>
(Yes there is a syntax error in this snippet).
</p>

<p>
I add this to the bottom of the file to see if my code is evaluated:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(js/console.log "hello2")
</pre>
</div>

<p>
Now loading silently fails when I upload my file, but the text updates.
</p>

<p>
So I evaluate this in isolation:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(load-string (@state :code-text))
</pre>
</div>

<p>
Ah, I get an analyzer error about <code>l</code> not being defined or something.
</p>

<p>
I update my handler like this:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(try
 (load-string t)
 (swap! state assoc :code-text t)
 (catch js/Error _ (js/alert "That code does not work.")))
</pre>
</div>

<p>
following Stew Halloway's example of binary error feedback. Either
there is an error, or there is no error.
Error messages are just bloat anyway.
</p>

<p>
console says:
</p>

<blockquote>
<p>
hello2
</p>
</blockquote>

<p>
Another piece in place, another hit of dopamine, another lesson
learned eternity.
</p>
</div>
</div>

<div id="outline-container-org615e24f" class="outline-2">
<h2 id="org615e24f">Only fetch once</h2>
<div class="outline-text-2" id="text-org615e24f">
<p>
I update the fetch code like so:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(or
 (:code-text @state)
 (-&gt;
  (js/fetch "main.cljs")
  (.then (fn [x] (.text x)))
  (.then (fn [x] (swap! state assoc :code-text x)))))
</pre>
</div>

<p>
I can do this because in Clojure everything is an expression and I can
put expressions anywhere.
</p>
</div>
</div>

<div id="outline-container-orgdc2c89b" class="outline-2">
<h2 id="orgdc2c89b">Make a big aquamarine rectangle into a small magenta rectangle</h2>
<div class="outline-text-2" id="text-orgdc2c89b">
<p>
I want something on the eyes so I change the style of the drop area:
</p>

<div class="org-src-container">
<pre class="src src-clojure">{:margin-top "1rem"
 :height "5rem"
 :width "5rem"
 :background "magenta"}
</pre>
</div>


<p>
Drag and drop, and:
</p>


<div id="orgb85ac85" class="figure">
<p><img src="https://i.imgur.com/IUrSY7t.png" alt="IUrSY7t.png" />
</p>
<p><span class="figure-number">Figure 2: </span>Visuals updated via dragging and dropping a source file.</p>
</div>

<p>
In emacs: <code>list-colors-display</code>, nice. And drag and drop with <a href="https://github.com/mwh/dragon">dragon.</a>
</p>

<p>
This contraption of course pales in comparison to having a REPL running.
But the idea is that it is might useful to somebody that doesn't even
know what a REPL <b><b>is</b></b>.
And if you are a beginner and now you wonder what that REPL thing is.
<a href="intro-to-clojure.html">Here</a> I try to make a list for how to get a dev setup.
</p>

<p>
Here is an idea I had and did not put into the initial version: Make
an <code>undo</code> button. So that the user can go back in the history of the website
</p>
</div>
</div>

<div id="outline-container-org24bac8f" class="outline-2">
<h2 id="org24bac8f">Codepen</h2>
<div class="outline-text-2" id="text-org24bac8f">
<p>
An arguably more mature version of this is up on <a href="https://codepen.io/Prestance/pen/PoOdZQw">codepen</a>.
</p>

<p>
A key difference is that my website prints its whole code.
No machinery is hidden anywhere.
</p>

<p>
If I may say so I think this is cute.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-26 Mon 13:21</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 29.0.50 (<a href="https://orgmode.org">Org</a> mode 9.5.4)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/anonymous-commands-in-emacs.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/anonymous-commands-in-emacs.html"/>
    <title>anonymous-commands-in-emacs</title>
    <updated>2022-09-23T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>anonymous-commands-in-emacs</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
</head>
<body>
<div id="content" class="content">
<h1 class="title">anonymous-commands-in-emacs</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org51da662">Introduction</a>
<ul>
<li><a href="#orgc422e44">add-hook</a></li>
</ul>
</li>
<li><a href="#org8790f7e">Solution</a>
<ul>
<li><a href="#org348a752">defun</a></li>
</ul>
</li>
<li><a href="#orgcd1a6c4">Result</a></li>
</ul>
</div>
</div>

<div id="outline-container-org51da662" class="outline-2">
<h2 id="org51da662">Introduction</h2>
<div class="outline-text-2" id="text-org51da662">
<p>
Generally, you do not want to make keybindings to anonymous lambdas.
Here is the primary reason that comes to mind:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(describe-keymap
 (<span style="font-weight: bold;">let</span> ((m (make-sparse-keymap)))
   (define-key m (kbd <span style="font-style: italic;">"f"</span>) (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">interactive</span>) 'hi))
   m))
</pre>
</div>

<p>
I get help buffer with this content:
</p>

<pre class="example" id="org10d5ef7">
Key             Binding
f		[closure]
</pre>

<p>
It is not really useful to just get the info [closure] here.
</p>
</div>

<div id="outline-container-orgc422e44" class="outline-3">
<h3 id="orgc422e44">add-hook</h3>
<div class="outline-text-3" id="text-orgc422e44">
<p>
The same thing goes for <code>add-hook</code>. From the doc string:
</p>

<blockquote>
<p>
FUNCTION may be any valid function, but it's recommended to use a
function symbol and not a lambda form.  Using a symbol will
ensure that the function is not re-added if the function is
edited, and using lambda forms may also have a negative
performance impact when running `add-hook' and `remove-hook'
</p>
</blockquote>

<p>
Some of the hooks functionality is meant for symbols.
</p>
</div>
</div>
</div>


<div id="outline-container-org8790f7e" class="outline-2">
<h2 id="org8790f7e">Solution</h2>
<div class="outline-text-2" id="text-org8790f7e">
<p>
Alias your function:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="font-weight: bold;">defalias</span> '<span style="font-weight: bold;">foo-a</span> (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">interactive</span>) 'hi))
 (describe-keymap
  (<span style="font-weight: bold;">let</span> ((m (make-sparse-keymap)))
    (define-key m (kbd <span style="font-style: italic;">"f"</span>) 'foo-a)
    (define-key m (kbd <span style="font-style: italic;">"b"</span>) (<span style="font-weight: bold;">defalias</span> '<span style="font-weight: bold;">foo-b</span> (<span style="font-weight: bold;">lambda</span> () (<span style="font-weight: bold;">interactive</span>) 'hi2)))
   m))
</pre>
</div>

<pre class="example" id="org9c98cd5">
Key             Binding
b		foo-b
f		foo-a
</pre>


<p>
Foo-b works because <code>defalias</code> returns the symbol.
</p>
</div>

<div id="outline-container-org348a752" class="outline-3">
<h3 id="org348a752">defun</h3>
<div class="outline-text-3" id="text-org348a752">
<p>
<code>(defalias 'foo (lambda () (interactive)))</code>
</p>

<p>
is essentially the same as
</p>

<p>
<code>(defun foo () (interactive))</code>
</p>
</div>
</div>
</div>

<div id="outline-container-orgcd1a6c4" class="outline-2">
<h2 id="orgcd1a6c4">Result</h2>
<div class="outline-text-2" id="text-orgcd1a6c4">
<p>
I end up just using  <code>defun</code> inline.
Examples:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(add-hook
 'sh-mode-hook
 (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/add-bash-completion</span> () ...))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-elisp">(mememacs/leader-def
  <span style="font-style: italic;">"pP"</span> (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">mm/project-switch-project-find-file</span> ()
         (<span style="font-weight: bold;">interactive</span>) ...))
</pre>
</div>

<p>
After writing this post, <a href="https://github.com/benjamin-asdf/dotfiles/commit/1e4135b977a5866de19020ba6f8a92b417339157">I went and fixed the remaining add-hook lambas</a> In my config.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-23 Fri 18:59</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 29.0.50 (<a href="https://orgmode.org">Org</a> mode 9.5.4)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/binaural-beats-using-scittle.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/binaural-beats-using-scittle.html"/>
    <title>binaural-beats-using-scittle</title>
    <updated>2022-09-19T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>binaural-beats-using-scittle</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
</head>
<body>
<div id="content" class="content">
<h1 class="title">binaural-beats-using-scittle</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org26f8006">Introduction</a>
<ul>
<li><a href="#orgfea38ed">What are binaural beats?</a></li>
<li><a href="#org7066b28">Science</a></li>
<li><a href="#org2933c2a">Frequency</a></li>
<li><a href="#orgc7bb3f7">The neuroscience of the auditory system </a></li>
<li><a href="#orge7abf89">I think this is ultra cool</a></li>
<li><a href="#orgb0f767d">Give me those binaural beats</a>
<ul>
<li><a href="#orgce65379">The problem statement:</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org1536094">scittle</a>
<ul>
<li><a href="#org3262fc1">1 ear, 1 sound</a>
<ul>
<li><a href="#orgebf1cb5">The first playground</a></li>
</ul>
</li>
<li><a href="#org6f2d08b">Playing Hz, first round</a></li>
</ul>
</li>
<li><a href="#orgfd054c2">binaural!</a>
<ul>
<li><a href="#org0bf627c">just put the second sound in the other ear, whatever</a></li>
</ul>
</li>
<li><a href="#org216197a">Intermediate results</a>
<ul>
<li><a href="#orgb154b38">Artifacts</a></li>
<li><a href="#orgd5a03b2">Binaural beat?</a></li>
</ul>
</li>
<li><a href="#org40992c8">Change the base frequency</a>
<ul>
<li><a href="#org6b7dde8">I really need a slider for frequencies in my life.</a>
<ul>
<li><a href="#orgd5c3829">nice dev experience, scittle really</a></li>
<li><a href="#org1b4df6e">code:</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgd4a4a38">Notes</a>
<ul>
<li><a href="#orgb761d46">Images</a></li>
<li><a href="#org98a8676">Update 1</a></li>
<li><a href="#orgcb940ee">Update 2</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-org26f8006" class="outline-2">
<h2 id="org26f8006">Introduction</h2>
<div class="outline-text-2" id="text-org26f8006">
<p>
The best thing about being a rationalist is figuring out you are wrong
about something.
</p>

<p>
I was thinking that <code>binaural beats</code> belong together with astral travel,
frankly, just down the toilet.
Turns out that not only was I wrong, but binaural beats also have cool
neuroscience and pose a fun engineering problem on top of that!
</p>

<p>
<a href="https://benjamin-asdf.github.io/just-40hz-binaural-beats/">Here</a> is the current result of my journeys up on gh-pages.
</p>
</div>

<div id="outline-container-orgfea38ed" class="outline-3">
<h3 id="orgfea38ed">What are binaural beats?</h3>
<div class="outline-text-3" id="text-orgfea38ed">
<p>
<a href="https://simple.wikipedia.org/wiki/Binaural_beats">Wikipedia</a>
</p>

<blockquote>
<p>
A binaural beat is an auditory illusion
</p>
</blockquote>

<blockquote>
<p>
For example, if a 530 Hz pure tone is presented to a subject's right ear, while a 520 Hz pure tone is presented to the subject's left ear, the listener will perceive the illusion of a third tone. The third sound is called a binaural beat, and in this example would have a perceived pitch correlating to a frequency of 10 Hz, that being the difference between the 530 Hz and 520 Hz pure tones presented to each ear.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-org7066b28" class="outline-3">
<h3 id="org7066b28">Science</h3>
<div class="outline-text-3" id="text-org7066b28">
<p>
There has developed a <a href="https://pubmed.ncbi.nlm.nih.gov/30073406/">growing science</a> about improvements in memory and
attention tasks when listening to binaural beats.
</p>

<p>
BTW the frequency and the time of the exposure matter (i.e. before and during the task is best).
</p>

<p>
Oh yes, I certainly want more of that memory and attention.
</p>


<div id="org11a6a4f" class="figure">
<p><img src="https://i.imgur.com/eHaaoYF.png" alt="eHaaoYF.png" />
</p>
<p><span class="figure-number">Figure 1: </span>A brain with headphones flying at the speed of light through space. Lightning on the brain. There is a sine wave in the background. Stylized, Colorful, Cinematic, Digital Art.</p>
</div>
</div>
</div>


<div id="outline-container-org2933c2a" class="outline-3">
<h3 id="org2933c2a">Frequency</h3>
<div class="outline-text-3" id="text-org2933c2a">
<p>
Theta waves (5Hz) <a href="https://pubmed.ncbi.nlm.nih.gov/29222722/">actually decrease memory task performance</a>. So I
really do not want to listen to those.
I heard <a href="https://hubermanlab.com/the-science-of-hearing-balance-and-accelerated-learning/">Andrew Huberman</a> saying that <b>40Hz</b> is the most powerful.
</p>

<p>
If you know about <a href="https://en.wikipedia.org/wiki/Neural_oscillation">brain waves</a>, you might remember 40Hz as the
legendarily intriguing gamma wave.
</p>

<p>
From <a href="https://en.wikipedia.org/wiki/Gamma_wave">wikipedia article</a>:
</p>

<blockquote>
<p>
Gamma rhythms are correlated with large scale brain network activity and cognitive phenomena such as working memory, attention, and perceptual grouping, and can be increased in amplitude via meditation or neurostimulation.
</p>
</blockquote>

<p>
We are really talking about cool stuff here, attention, working
memory, and memory processes. Also, the <a href="https://en.wikipedia.org/wiki/Binding_problem">Binding problem</a>.
</p>
</div>
</div>

<div id="outline-container-orgc7bb3f7" class="outline-3">
<h3 id="orgc7bb3f7">The neuroscience of the <a href="https://en.wikipedia.org/wiki/Hearing">auditory system </a></h3>
<div class="outline-text-3" id="text-orgc7bb3f7">
<p>
Hearing is cool because the neuronal neural information first goes into the brainstem
and then goes up some nuclei up to the thalamus. And eventually to the
temporal lobes of the cortex (the 2 arm things on the side of the brain).
</p>

<p>
This is different from the vision system where the info goes directly to the thalamus.
</p>

<p>
Quoting this <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7082494/">paper</a>:
</p>

<blockquote>
<p>
Presenting two tones with a slight frequency mismatch to each ear separately creates a perception of a third tone, a binaural beat, that oscillates at the absolute difference between the tones (Oster, 1973; Moore, 2012). These beats are thought to originate subcortically in the medial nucleus of the superior olivary complex, the first nucleus in the auditory pathway to receive bilateral input (Wernick and Starr, 1968; Kuwada et al., 1979). This “illusory” third tone is lateralized between the left and right ear of the listener, making binaural beats useful for spatial sound research (Ross et al., 2014).
</p>
</blockquote>

<p>
from the Wikipedia articles on <a href="https://en.wikipedia.org/wiki/Sound_localization">Sound localization</a>
</p>

<blockquote>
<p>
The auditory system uses several cues for sound source localization, including time difference and level difference (or intensity difference) between the ears, and spectral information.
</p>
</blockquote>

<p>
and <a href="https://en.wikipedia.org/wiki/Superior_olivary_complex">Superior olivary complex</a>
</p>

<blockquote>
<p>
The superior olivary nucleus plays a number of roles in hearing. The medial superior olive (MSO) is a specialized nucleus that is believed to measure the time difference of arrival of sounds between the ears (the interaural time difference or ITD). The ITD is a major cue for determining the azimuth of sounds, i.e., localizing them on the azimuthal plane – their degree to the left or the right.
</p>
</blockquote>

<p>
So there is sort of a clump of neurons in the brainstem that are specialized to integrate the timing information between the left and the right ear.
I'm guessing those then start firing in the 40Hz frequency and that is interpreted as a third sound higher up.
</p>
</div>
</div>

<div id="outline-container-orge7abf89" class="outline-3">
<h3 id="orge7abf89">I think this is ultra cool</h3>
<div class="outline-text-3" id="text-orge7abf89">
<p>
You throw some energy at the brain in the right form (in this case
some sound waves) and it reacts in some special way.
If you put it like that, it is not surprising that some things
eventually, end up doing <b>something</b>.
</p>

<p>
Now that the phenomenon has a name we can talk about it, similar to <a href="https://en.wikipedia.org/wiki/ASMR">ASMR</a>.
</p>

<p>
Thinking about how this was always part of how the brain works.
Makes me wonder if some music composers and performers implicitly hit on this earlier, or not.
I tried searching the web for
</p>

<blockquote>
<p>
binaural beats in music
</p>
</blockquote>

<p>
but I really get the same results mix as when I search for <code>binaural beats</code>.
</p>
</div>
</div>


<div id="outline-container-orgb0f767d" class="outline-3">
<h3 id="orgb0f767d">Give me those binaural beats</h3>
<div class="outline-text-3" id="text-orgb0f767d">
<p>
I dint feel like opening a youtube video just to listen to some
sounds. As an aspiring hacker and engineer, I just want to make my
computer make some sounds that I want to listen to.
So I decided to make a simple website that just makes binaural beats and nothing else.
</p>
</div>

<div id="outline-container-orgce65379" class="outline-4">
<h4 id="orgce65379">The problem statement:</h4>
<div class="outline-text-4" id="text-orgce65379">
<p>
Make a sound on 1 ear (e.g. left headphone speaker)
</p>

<p>
Make a second sound on the other ear, with a +40Hz frequency.
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-org1536094" class="outline-2">
<h2 id="org1536094">scittle</h2>
<div class="outline-text-2" id="text-org1536094">
<p>
I set up a beautiful hello world <a href="https://github.com/babashka/scittle/tree/main/doc/nrepl">and connect with nrepl</a>
and get greeted with a friendly <code>Isn't cool? this :)</code>.
</p>

<p>
It took me a moment to figure out I should open my index.html with a browser.
Then do the <code>cider-connect-cljs</code>
</p>
</div>

<div id="outline-container-org3262fc1" class="outline-3">
<h3 id="org3262fc1">1 ear, 1 sound</h3>
<div class="outline-text-3" id="text-org3262fc1">
<p>
First I think let's start making a sound in 1 ear.
</p>

<p>
I am thinking a frequency that I can hear would be nice
so I search the web for <a href="https://en.wikipedia.org/wiki/Hearing_range">human auditory frequencies</a>
</p>

<p>
1 kHz sounds like a good first thing to try.
I am figuring something inside the speech area should sound natural
(turned out that was a naive assumption).
</p>
</div>

<div id="outline-container-orgebf1cb5" class="outline-4">
<h4 id="orgebf1cb5">The first playground</h4>
<div class="outline-text-4" id="text-orgebf1cb5">
<p>
I have a file called playground.clj
(Later I figured out I should rename to .cljs :) ).
</p>

<p>
Now getting heavily inspired by <a href="https://github.com/Cortexelus/Polyphonic-Binaural-Beats">this code</a>.
Going 1 form by 1 like a usual lisp interaction dev experience, lulling it up:
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(def ctx (js/window.AudioContext.))
(def ctx js/window.webkitAudioContext)

(def panner (ctx.createStereoPanner))
(set! (.. panner -pan -value) -1)
(.. panner (connect ctx.destination))

(def oscillators (atom []))
(let [o (ctx.createOscillator)
      _ (set! (.- o type) "sine")
      _ (set! (.. o -frequency -value) 1000)]
  (. o start)
  (. o (connect panner))
  (swap! oscillators conj o))
</pre>
</div>

<p>
I connect my headphones via Bluetooth (a small feat on Linux, maybe
another blog post), and lo and behold I hear a tone in my left ear.
It is a really obnoxious sound, after a few seconds, it is so painful
that I move the headphone to the side.
</p>
</div>
</div>
</div>

<div id="outline-container-org6f2d08b" class="outline-3">
<h3 id="org6f2d08b">Playing Hz, first round</h3>
<div class="outline-text-3" id="text-org6f2d08b">
<p>
Here is a more endurable sound:
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(set! (.. (@oscillators 0) -frequency -value) 200)
</pre>
</div>

<p>
Playing around live at the REPL with sound is <b>fun</b>!
</p>

<p>
Now I am thinking, let's pick some music frequency, those are supposed
to be crafted over hundreds of years to be beautiful frequencies, right?
</p>

<p>
Checking out <a href="https://pages.mtu.edu/~suits/notefreq432.html">a website</a>. I pick D#3 / Eb3. Whatever that is.
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(def a-note-freq 152.74)
(set! (.. (@oscillators 0) -frequency -value) a-note-freq)
</pre>
</div>
</div>
</div>
</div>


<div id="outline-container-orgfd054c2" class="outline-2">
<h2 id="orgfd054c2">binaural!</h2>
<div class="outline-text-2" id="text-orgfd054c2">
<p>
Let's do the thing where I add +40Hz and play that on the other ear.
First I start generalizing how I make a panner:
</p>

<div class="org-src-container">
<pre class="src src-Clojure">(defn -&gt;panner [ctx left?]
  (let
      [panner (. ctx createStereoPanner)
       _ (set! (.. panner -pan -value) (if left? -1 1))
       _ (.. panner (connect ctx.destination))]
    panner))
</pre>
</div>

<p>
For some reason running this I get:
</p>

<pre class="example" id="orgcab3873">
Failed to execute 'connect' on 'AudioNode': Overload resolution failed.
</pre>

<p>
I went and asked in the nbb clojurians slack. I am sure one day we will figure out
this error, in the meantime&#x2026;
</p>
</div>

<div id="outline-container-org0bf627c" class="outline-3">
<h3 id="org0bf627c">just put the second sound in the other ear, whatever</h3>
<div class="outline-text-3" id="text-org0bf627c">
<div class="org-src-container">
<pre class="src src-Clojure">(ns beats)

(def a-note-freq 152.74)
(def binaural-beat-freq 40)
(def oscillators (atom []))
(defonce ctx (js/window.AudioContext.))

(def panners
  {:left
   (let [left? true]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))
   :right
   (let [left? nil]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))})

(defn oscillate [panner hz]
  (let [o (ctx.createOscillator)
	_ (set! (.- o type) "sine")
	_ (set! (.. o -frequency -value) hz)]
    (. o start)
    (. o (connect panner))
    (swap! oscillators conj o)))

(-&gt; panners :right (oscillate (+ a-note-freq binaural-beat-freq)))
(-&gt; panners :left (oscillate a-note-freq))
</pre>
</div>

<p>
lol, it works.
</p>
</div>
</div>
</div>

<div id="outline-container-org216197a" class="outline-2">
<h2 id="org216197a">Intermediate results</h2>
<div class="outline-text-2" id="text-org216197a">
</div>
<div id="outline-container-orgb154b38" class="outline-3">
<h3 id="orgb154b38">Artifacts</h3>
<div class="outline-text-3" id="text-orgb154b38">
<p>
Every now and then there are artifacts in the sound with my headphones setup.
Some are just rustling and crackling.
</p>

<p>
Others sound like some kind of metal being stretched far, far away, underwater, or in slow motion.
It reminds me a bit of the <a href="https://www.youtube.com/watch?v=O6iHgOEp0Fg&amp;t=452s">Dungeon Keeper soundtrack</a>. Dark and eerie,
sort of slow mow.
</p>
</div>
</div>

<div id="outline-container-orgd5a03b2" class="outline-3">
<h3 id="orgd5a03b2">Binaural beat?</h3>
<div class="outline-text-3" id="text-orgd5a03b2">
<p>
Pretty sure I get the third-tone illusion.
I would describe it as some kind of background or in between "airy"
sound.
It is supposed to seem to come from the middle of the brain.
It is as if the fabric of the sound is richer. Like there is sound in more places.
</p>
</div>
</div>
</div>

<div id="outline-container-org40992c8" class="outline-2">
<h2 id="org40992c8">Change the base frequency</h2>
<div class="outline-text-2" id="text-org40992c8">
<p>
It occurred to me, that if I get the 40Hz sound illusion, then I would
predict that I can change the base frequency, keeping the 40Hz difference between
left and right ear invariant. I should then constantly perceive a 3rd tone which is the binaural beat.
</p>
</div>

<div id="outline-container-org6b7dde8" class="outline-3">
<h3 id="org6b7dde8">I really need a slider for frequencies in my life.</h3>
<div class="outline-text-3" id="text-org6b7dde8">
<p>
I did not do much web dev in my life and making a slider was a first.
</p>

<p>
I managed to put something together, drawing inspiration from
<a href="https://www.w3schools.com/howto/howto_js_rangeslider.asp">w3 schools</a> for the Html, <a href="https://babashka.org/scittle/">scittle</a> for how to export, and <a href="https://stackoverflow.com/questions/13896685/html5-slider-with-onchange-function">stackoverflow</a> for how to add a function to "onchange".
</p>
</div>

<div id="outline-container-orgd5c3829" class="outline-4">
<h4 id="orgd5c3829">nice dev experience, scittle really</h4>
<div class="outline-text-4" id="text-orgd5c3829">
<ol class="org-ol">
<li>I did not need to restart my REPL at any point, adding those Html
elements, then reloading my index.html - it handles that.</li>
<li><p>
I get auto completions with cider. E.g. <code>js/..</code> does something.
</p>

<div class="org-center">
<p>
BTW here is a tip, for <code>sci</code> projects (<code>babashka</code>, <code>nbb</code>, <code>scittle</code>).
Currently, you need to evaluate a namespace form first.
Then you can get completions.
At least with cider.
</p>
</div></li>
</ol>



<div id="orgfe83792" class="figure">
<p><img src="https://i.imgur.com/M8rSuZ3.png" alt="M8rSuZ3.png" />
</p>
<p><span class="figure-number">Figure 2: </span>A mouse with headphones typing on a laptop. Intelligent. Sparks of magic are flying around. There is lightning on the mouse and laptop. Computer programming source code. Colorful, playful.</p>
</div>

<p>
The word <code>scittle</code> makes me think of a small mammal in the habitus of
a mouse.
I imagine it scurrying and curiously sniffing around.
</p>
</div>
</div>

<div id="outline-container-org1b4df6e" class="outline-4">
<h4 id="org1b4df6e">code:</h4>
<div class="outline-text-4" id="text-org1b4df6e">
<p>
index.html
</p>
<div class="org-src-container">
<pre class="src src-Html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script&gt;var SCITTLE_NREPL_WEBSOCKET_PORT = 1340;&lt;/script&gt;
    &lt;script src="https://cdn.jsdelivr.net/npm/scittle@0.3.10/dist/scittle.js" type="application/javascript"&gt;&lt;/script&gt;
    &lt;script src="https://cdn.jsdelivr.net/npm/scittle@0.3.10/dist/scittle.nrepl.js" type="application/javascript"&gt;&lt;/script&gt;
    &lt;script type="application/x-scittle" src="beats.cljs"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="slidecontainer"&gt;
      &lt;input type="range" min="120000" max="250000" value="15274"
      class="slider" id="frequencyRange" onchange="update_app(this.value)"&gt; &lt;/div&gt;
    &lt;div id="frequencyDisplay"&gt; &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
</div>

<p>
beats.cljs
</p>
<div class="org-src-container">
<pre class="src src-clojure">(ns beats)

(def binaural-beat-freq 40)
(defonce ctx (js/window.AudioContext.))
(def slider (js/document.getElementById "frequencyRange"))
(def display (js/document.getElementById "frequencyDisplay"))

(def panners
  {:left
   (let [left? true]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))
   :right
   (let [left? nil]
     (let [panner (. ctx createStereoPanner)]
       (set! (.. panner -pan -value) (if left? -1 1))
       (.connect panner ctx.destination)
       panner))})

(defn update-display! [value]
  (set! (.-innerHTML display)
	(str "Base frequency: " value)))

(def get-oscillator
  (memoize
   (fn [panner]
     (let [o (ctx.createOscillator)]
       (set! (.- o type) "sine")
       (. o start)
       (. o (connect panner))
       o))))

(defn oscillate [panner hz]
  (let [o (get-oscillator panner)
	_ (set! (.. o -frequency -value) hz)])
  hz)

(defn update-app [frequency-value]
  (let [frequency-value (/ frequency-value 1000.0)]
    (-&gt; panners :right (oscillate (+ frequency-value binaural-beat-freq)))
    (-&gt; panners :left (oscillate frequency-value))
    (update-display! frequency-value)))

(set! (.-update_app js/window) update-app)

(update-app (* 1000 152.74))
</pre>
</div>

<p>
The fact that I export my function by setting this global <code>window</code> object is quite wild.
And then how I write a string of js code in the 'onchange' of the
Html - damn.
As I said, I am new to the web. Now I know one reason why it is called the wild west.
But it let me "just do" what I wanted without being in my way so I
appreciate that.
</p>

<p>
On the scittle side, I updated the code to only get 1 oscillator per slider. Seems like stuff is working.
Switching up the frequencies via the slider is satisfying.
For some reason, those artifacts are also gone. Maybe sliders just ensure balance and harmony in the world?
</p>

<p>
I am pretty sure I can tell there is 1 sound that seems to stay the same across frequencies.
</p>

<p>
I do the float <code>* 1000</code> trick because I want to work with 2 digits for my frequencies.
</p>

<p>
Btw I also quickly tried what a <b>real</b> 40Hz tone sounds like. Ultra-low. I almost feel like I can make out the single waves, maybe that
are the headphones cracking?
Not surprising as the lower bound of human hearing is 20hz.
The sound of the highest achievement of human thought.
Genius insights, ideas that come to you like lightning. Globally
integrating patterns of the brain and mind.
</p>


<div id="orga7ca92f" class="figure">
<p><img src="https://i.imgur.com/xijojsT.png" alt="xijojsT.png" />
</p>
<p><span class="figure-number">Figure 3: </span>Harry potter wearing headphones having spiritual enlightenment about magic. Glowing magic sparks fly around. Colorful, cinematic, video game concept art.</p>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-orgd4a4a38" class="outline-2">
<h2 id="orgd4a4a38">Notes</h2>
<div class="outline-text-2" id="text-orgd4a4a38">
</div>
<div id="outline-container-orgb761d46" class="outline-3">
<h3 id="orgb761d46">Images</h3>
<div class="outline-text-3" id="text-orgb761d46">
<p>
Made with <a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">stable-diffusion</a>.
The captions are the prompts I used.
</p>
</div>
</div>

<div id="outline-container-org98a8676" class="outline-3">
<h3 id="org98a8676">Update 1</h3>
<div class="outline-text-3" id="text-org98a8676">
<p>
Currently does not work on mobile. Seems like I have the
opportunity for another web dev feat, then.
Seems like the issue is isolated on the sound appearing because the
slider value works fine (meaning that the scittle code is running fine).
</p>
</div>
</div>

<div id="outline-container-orgcb940ee" class="outline-3">
<h3 id="orgcb940ee">Update 2</h3>
<div class="outline-text-3" id="text-orgcb940ee">
<p>
Now it also works on mobile!
Somebody helpfully pointed out on slack that on mac there was an error
about audio refusing to play before the first touch event.
I fixed that by adding a <code>play</code> button.
But mobile still did not work, ok.
After checking <a href="https://stackoverflow.com/questions/46345883/why-audio-not-playing-on-mobile-browser">stackoverflow</a> I still sort of have the idea that it has
to do with user interaction events and this <code>AudioContext</code>.
I first wanted to delay the whole audio setup until you click the
button.
But <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext">read</a> that you should make a single <code>AudioContext</code> at the beginning.
</p>

<p>
So I try to delay the 1 other thing in the code:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(def panners
 (delay {:left (-&gt;panner true) :right (-&gt;panner false)}))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-clojure">(-&gt; @panners :right (oscillate (+ frequency-value binaural-beat-freq)))
(-&gt; @panners :left (oscillate frequency-value))
</pre>
</div>


<p>
It works, haha!
</p>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-19 Mon 11:04</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 29.0.50 (<a href="https://orgmode.org">Org</a> mode 9.5.4)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
  <entry>
    <id>https://benjamin-asdf.github.io/faster-than-light-memes/intro-to-clojure.html</id>
    <link href="https://benjamin-asdf.github.io/faster-than-light-memes/intro-to-clojure.html"/>
    <title>intro-to-clojure</title>
    <updated>2022-09-12T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>intro-to-clojure</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
</head>
<body>
<div id="content" class="content">
<h1 class="title">intro-to-clojure</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd24207f">Introduction</a></li>
<li><a href="#orgbe87a21">A dev environment</a>
<ul>
<li><a href="#org5fa5f77">Vs Code</a></li>
<li><a href="#orgbd4a342">Emacs</a></li>
</ul>
</li>
<li><a href="#org85b68b3">Nr 1 book for beginners</a></li>
<li><a href="#orgff88b84">Slack</a></li>
<li><a href="#org14e78a7">Other such lists</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgd24207f" class="outline-2">
<h2 id="orgd24207f">Introduction</h2>
<div class="outline-text-2" id="text-orgd24207f">
<p>
Clojure is a modern, functional lisp with a fiercely convinced community and
production orientation.
</p>
</div>
</div>

<div id="outline-container-orgbe87a21" class="outline-2">
<h2 id="orgbe87a21">A dev environment</h2>
<div class="outline-text-2" id="text-orgbe87a21">
<p>
Get prepared for your journey as a pilot of an alien spaceship.
As a beginner I suggest either
</p>
</div>

<div id="outline-container-org5fa5f77" class="outline-3">
<h3 id="org5fa5f77">Vs Code</h3>
<div class="outline-text-3" id="text-org5fa5f77">
<p>
Easy to make work. A great editor. You will not need to be ashamed of
your choice. <a href="https://calva.io/getting-started/">calva for vscode</a>
</p>
</div>
</div>

<div id="outline-container-orgbd4a342" class="outline-3">
<h3 id="orgbd4a342">Emacs</h3>
<div class="outline-text-3" id="text-orgbd4a342">
<p>
Strong affinity to hacker culture and a program that is more than a
tool, but eventually an extension to your hands, heart, and mind.
</p>

<p>
Here is a config file I tried to make for beginners:
<a href="https://github.com/benjamin-asdf/simple-easy-emacs">https://github.com/benjamin-asdf/simple-easy-emacs</a>
</p>

<p>
A framework by clojurians that might be just right for you:
<a href="https://github.com/corgi-emacs/corgi">https://github.com/corgi-emacs/corgi</a>
</p>

<p>
There is also doom and spacemacs that enjoy wide appraisal for their
"out of the box" experience.
</p>
</div>
</div>
</div>

<div id="outline-container-org85b68b3" class="outline-2">
<h2 id="org85b68b3">Nr 1 book for beginners</h2>
<div class="outline-text-2" id="text-org85b68b3">
<p>
<a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/">Clojure for the Brave and True</a>
</p>
</div>
</div>

<div id="outline-container-orgff88b84" class="outline-2">
<h2 id="orgff88b84">Slack</h2>
<div class="outline-text-2" id="text-orgff88b84">
<p>
Meet nice people that are excited about the tech <a href="https://clojurians.slack.com/?redir">on slack</a>.
Seriously a lot of people hang there and answer beginner questions,
everybody is welcome.
</p>
</div>
</div>

<div id="outline-container-org14e78a7" class="outline-2">
<h2 id="org14e78a7">Other such lists</h2>
<div class="outline-text-2" id="text-org14e78a7">
<p>
Carin is cool and has a funny picture of the emacs learning curve here:
<a href="https://howistart.org/posts/clojure/1/">https://howistart.org/posts/clojure/1/</a>
</p>

<p>
I like that they have a philosophy section mentioning Rich Hickey's talks
this matters a lot to clojurians.
</p>

<p>
<a href="https://thoughtbot.com/blog/tips-for-clojure-beginners">https://thoughtbot.com/blog/tips-for-clojure-beginners</a>
<a href="https://gist.github.com/yogthos/be323be0361c589570a6da4ccc85f58f">https://gist.github.com/yogthos/be323be0361c589570a6da4ccc85f58f</a>
<a href="https://www.clojurenewbieguide.com/">https://www.clojurenewbieguide.com/</a>
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-09-12 Mon 20:23</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 29.0.50 (<a href="https://orgmode.org">Org</a> mode 9.5.4)</p>
</div>
</body>
</html>
]]>
    </content>
  </entry>
</feed>
